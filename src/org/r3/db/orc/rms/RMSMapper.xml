<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
  TODO: xmlCopyRight.txt
   
  -->
<!--
  TODO: xmlReadme.txt
   
  -->


<!-- Mapper Target DBMS: [SERVER_MYSQL] -->
<!-- <mapper resource="org/r3/db/orc/rms/RMSMapper.xml"/> -->
<mapper namespace="org.r3.db.orc.rms.RMSMapper" >
    <resultMap id="BaseResultMap" type="org.r3.db.orc.rms.RMSDTO" >
         <id column="rmsid" property="rmsid" jdbcType="VARCHAR" />
           <result column="filename" property="filename" jdbcType="VARCHAR" />
           <result column="fileurl" property="fileurl" jdbcType="VARCHAR" />
           <result column="filesize" property="filesize" jdbcType="INTEGER" />
           <result column="numberofcerts" property="numberofcerts" jdbcType="INTEGER" />
           <result column="numberofdupcerts" property="numberofdupcerts" jdbcType="INTEGER" />
           <result column="rectimestamp" property="rectimestamp" jdbcType="TIMESTAMP" />
    </resultMap>

  <sql id="Filter_Where_Clause" >
    <where >
      <foreach collection="filter.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
                <when test="criterion.subSelectCriterion" >
                  and ${criterion.prefixCondition} #{criterion.value} ${criterion.suffixCondition}
                </when>                                
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <!--
  <sql id="Filter_Where_Clause_4_Update" >
    <where >
      <foreach collection="filter.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  -->  
  <sql id="Base_Column_List" >
    rmsid,  filename,  fileurl,  filesize,  numberofcerts,  numberofdupcerts,  rectimestamp  </sql>
  
  <sql id='GroupBy_Column_List'>
    <trim suffixOverrides=",">
        <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('rmsid')" >
           rmsid,
       </when>
       <otherwise>
           null as rmsid,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('filename')" >
           filename,
       </when>
       <otherwise>
           null as filename,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('fileurl')" >
           fileurl,
       </when>
       <otherwise>
           null as fileurl,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('filesize')" >
           filesize,
       </when>
       <otherwise>
           null as filesize,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('numberofcerts')" >
           numberofcerts,
       </when>
       <otherwise>
           null as numberofcerts,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('numberofdupcerts')" >
           numberofdupcerts,
       </when>
       <otherwise>
           null as numberofdupcerts,
       </otherwise>         
     </choose> 
	       <choose>
       <when test="filter != null &amp;&amp; filter.isGroupBy('rectimestamp')" >
           rectimestamp,
       </when>
       <otherwise>
           null as rectimestamp,
       </otherwise>         
     </choose> 
	       </trim>       
  </sql>
  
  <select id="selectByRmsid" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from orc_rms
    where rmsid = #{rmsid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByRmsid" parameterType="map" >
    delete
    from orc_rms
    where rmsid = #{rmsid,jdbcType=VARCHAR}
  </delete>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from orc_rms    
    where  rmsid = #{pk.rmsid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete
    from orc_rms
    where  rmsid = #{pk.rmsid,jdbcType=VARCHAR}
  </delete>  
  <select id="select" resultMap="BaseResultMap" parameterType="map" >
    select
    <if test="filter != null &amp;&amp; filter.distinct" >
      distinct
    </if>
    
    <choose>
       <when test="filter != null &amp;&amp; filter.groupByClause != null" >
           <include refid="GroupBy_Column_List" />
       </when>
       <otherwise>
           <include refid="Base_Column_List" />
       </otherwise>
    </choose>
        
    from orc_rms
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
    <if test="filter != null &amp;&amp; filter.groupByClause != null" >
      group by ${filter.groupByClause}
    </if>
    <if test="filter != null &amp;&amp; filter.orderByClause != null" >
      order by ${filter.orderByClause}
    </if>
    <if test="filter != null &amp;&amp; filter.limitFetch > 0" >
      limit ${filter.limitFetch}
    </if>
  </select>
  <select id="count" parameterType="map" resultType="java.lang.Integer" >
    select count(*) from orc_rms
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
  </select>  
  <delete id="delete" parameterType="map" >
    delete from orc_rms
    <!-- _parameter: dato che e' una map lo sostituisco con il nome del parametro in quanto non Ã¨ l'unico -->
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="map" >
    insert into orc_rms (
 rmsid, filename, fileurl, filesize, numberofcerts, numberofdupcerts, rectimestamp      )
    values (
 
 #{record.rmsid,jdbcType=VARCHAR}, 
 #{record.filename,jdbcType=VARCHAR}, 
 #{record.fileurl,jdbcType=VARCHAR}, 
 #{record.filesize,jdbcType=INTEGER},
 
 #{record.numberofcerts,jdbcType=INTEGER}, 
 #{record.numberofdupcerts,jdbcType=INTEGER}, 
 #{record.rectimestamp,jdbcType=TIMESTAMP}
      )
  </insert>
  <update id="update" parameterType="map" >
    update orc_rms
    <set >
      <if test="record.filenameDirty" >
        filename = #{record.filename,jdbcType=VARCHAR},
      </if>      
      <if test="record.fileurlDirty" >
        fileurl = #{record.fileurl,jdbcType=VARCHAR},
      </if>      
      <if test="record.filesizeDirty" >
        filesize = #{record.filesize,jdbcType=INTEGER},
      </if>      
      <if test="record.numberofcertsDirty" >
        numberofcerts = #{record.numberofcerts,jdbcType=INTEGER},
      </if>      
      <if test="record.numberofdupcertsDirty" >
        numberofdupcerts = #{record.numberofdupcerts,jdbcType=INTEGER},
      </if>      
      <if test="record.rectimestampDirty" >
        rectimestamp = #{record.rectimestamp,jdbcType=TIMESTAMP},
      </if>      
    </set>
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
      <!-- Non dovrebbe servire in quanto il filter e' sempre named. -->
      <!-- <include refid="Filter_Where_Clause_4_Update" /> -->
    </if>
  </update>
  <update id="updateByPrimaryKey" parameterType="map" >
    update orc_rms
    <set >
      <if test="record.filenameDirty" >
        filename = #{record.filename,jdbcType=VARCHAR},
      </if>
      <if test="record.fileurlDirty" >
        fileurl = #{record.fileurl,jdbcType=VARCHAR},
      </if>
      <if test="record.filesizeDirty" >
        filesize = #{record.filesize,jdbcType=INTEGER},
      </if>
      <if test="record.numberofcertsDirty" >
        numberofcerts = #{record.numberofcerts,jdbcType=INTEGER},
      </if>
      <if test="record.numberofdupcertsDirty" >
        numberofdupcerts = #{record.numberofdupcerts,jdbcType=INTEGER},
      </if>
      <if test="record.rectimestampDirty" >
        rectimestamp = #{record.rectimestamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    where  rmsid = #{record.rmsid,jdbcType=VARCHAR}
  </update>

</mapper>
