//
// generated by jGAMe Software - GPA Gruppo Progetti Avanzati s.r.l. 2016-2017
//
//
// README Section
//


package org.r3.db.system.site;

import org.r3.db.utils.*;

public class SiteDTOBase extends org.r3.db.DTOBase
{
    int[] dirtyFlagsArray;

    protected java.lang.String  site;
    protected java.lang.String  parentsite;
    protected java.lang.String  sitedescr;
    protected java.lang.String  sitelanguages;
    protected java.lang.String  sitesummary;
    protected java.lang.String  sitedomain;
    protected java.lang.String  calendarid;
    protected java.lang.String  hostname;
    protected java.lang.String  homeurl;
    protected java.lang.String  consoleurl;
    protected java.lang.String  sitetype;

    public static final java.lang.String SITE_DEFAULT  =  null;
    public static final java.lang.String PARENTSITE_DEFAULT  =  null;
    public static final java.lang.String SITEDESCR_DEFAULT  =  null;
    public static final java.lang.String SITELANGUAGES_DEFAULT  =  null;
    public static final java.lang.String SITESUMMARY_DEFAULT  =  null;
    public static final java.lang.String SITEDOMAIN_DEFAULT  =  null;
    public static final java.lang.String CALENDARID_DEFAULT  =  null;
    public static final java.lang.String HOSTNAME_DEFAULT  =  null;
    public static final java.lang.String HOMEURL_DEFAULT  =  null;
    public static final java.lang.String CONSOLEURL_DEFAULT  =  null;
    public static final java.lang.String SITETYPE_DEFAULT  =  null;

    public static final int SITE_DIRTYGROUP  =  0;
    public static final int SITE_DIRTYMASK   =  1;
    public static final int PARENTSITE_DIRTYGROUP  =  0;
    public static final int PARENTSITE_DIRTYMASK   =  2;
    public static final int SITEDESCR_DIRTYGROUP  =  0;
    public static final int SITEDESCR_DIRTYMASK   =  4;
    public static final int SITELANGUAGES_DIRTYGROUP  =  0;
    public static final int SITELANGUAGES_DIRTYMASK   =  8;
    public static final int SITESUMMARY_DIRTYGROUP  =  0;
    public static final int SITESUMMARY_DIRTYMASK   =  16;
    public static final int SITEDOMAIN_DIRTYGROUP  =  0;
    public static final int SITEDOMAIN_DIRTYMASK   =  32;
    public static final int CALENDARID_DIRTYGROUP  =  0;
    public static final int CALENDARID_DIRTYMASK   =  64;
    public static final int HOSTNAME_DIRTYGROUP  =  0;
    public static final int HOSTNAME_DIRTYMASK   =  128;
    public static final int HOMEURL_DIRTYGROUP  =  0;
    public static final int HOMEURL_DIRTYMASK   =  256;
    public static final int CONSOLEURL_DIRTYGROUP  =  0;
    public static final int CONSOLEURL_DIRTYMASK   =  512;
    public static final int SITETYPE_DIRTYGROUP  =  0;
    public static final int SITETYPE_DIRTYMASK   =  1024;


    /**
      * DataBean constructor.
      */
    public SiteDTOBase()
    {
       dirtyFlagsArray = new int[11 / 30 + 1];
       clearDirtyFlags();

       site = SITE_DEFAULT;
       parentsite = PARENTSITE_DEFAULT;
       sitedescr = SITEDESCR_DEFAULT;
       sitelanguages = SITELANGUAGES_DEFAULT;
       sitesummary = SITESUMMARY_DEFAULT;
       sitedomain = SITEDOMAIN_DEFAULT;
       calendarid = CALENDARID_DEFAULT;
       hostname = HOSTNAME_DEFAULT;
       homeurl = HOMEURL_DEFAULT;
       consoleurl = CONSOLEURL_DEFAULT;
       sitetype = SITETYPE_DEFAULT;
    }

    /**
      * Copy constructor.
      */
    public SiteDTOBase(SiteDTOBase another)
    {

       site = another.getSite();
       parentsite = another.getParentsite();
       sitedescr = another.getSitedescr();
       sitelanguages = another.getSitelanguages();
       sitesummary = another.getSitesummary();
       sitedomain = another.getSitedomain();
       calendarid = another.getCalendarid();
       hostname = another.getHostname();
       homeurl = another.getHomeurl();
       consoleurl = another.getConsoleurl();
       sitetype = another.getSitetype();

       dirtyFlagsArray = another.getCopyOfDirtyFlags();
    }

    public void clearDirtyFlags()
    {
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            dirtyFlagsArray[i] = 0;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    public int[] getCopyOfDirtyFlags()
    {
       int[] copyOf = new int[dirtyFlagsArray.length];
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            copyOf[i] = dirtyFlagsArray[i];

       return copyOf;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isDirty()
    {
    	for(int i = 0; i < dirtyFlagsArray.length; i++)
    	if (dirtyFlagsArray[i] != 0)
    		return true;
    	
    	return false;
    }
    
    protected void markFieldAsDirty(int mainIndex, int bitwiseIndex, boolean aFlag)
    {
       if (aFlag)
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] | bitwiseIndex;
       else
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] & ~bitwiseIndex;
    }

    protected boolean checkFieldDirtiness(int mainIndex, int bitwiseIndex)
    {
       return (dirtyFlagsArray[mainIndex] & bitwiseIndex) != 0;
    }

    public String getDtokey()
    {
        StringBuilder stb = new StringBuilder();
        stb.append(site);
        return stb.toString();
    }

    public String getDtodescr()
    {
        boolean notNull = false;
        StringBuilder stb = new StringBuilder();
        if (sitedescr != null)
        {
        stb.append(sitedescr);
        notNull = true;        
        }
        if (notNull)
            return stb.toString();
            
        return null;
    }

    /**
      * DataBean Getter And Setter Accessor
      */

    // site getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSiteDirty()  { return checkFieldDirtiness(SITE_DIRTYGROUP, SITE_DIRTYMASK); }

    public java.lang.String   getSite()         { return site; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSiteAsString() { return (site == null) ? "" : site; }

    // site setter methods.
    
    protected void markSiteAsDirty(boolean aFlag)  { markFieldAsDirty(SITE_DIRTYGROUP, SITE_DIRTYMASK, aFlag); }


    public void setSite(String  p)
    {
       setSite(p, DTOCasingStyle.none);
    }
    
    public void setSite(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSiteAsDirty(!equalsObject(site, p));
       site = p;
    }

    // parentsite getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isParentsiteDirty()  { return checkFieldDirtiness(PARENTSITE_DIRTYGROUP, PARENTSITE_DIRTYMASK); }

    public java.lang.String   getParentsite()         { return parentsite; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getParentsiteAsString() { return (parentsite == null) ? "" : parentsite; }

    // parentsite setter methods.
    
    protected void markParentsiteAsDirty(boolean aFlag)  { markFieldAsDirty(PARENTSITE_DIRTYGROUP, PARENTSITE_DIRTYMASK, aFlag); }


    public void setParentsite(String  p)
    {
       setParentsite(p, DTOCasingStyle.none);
    }
    
    public void setParentsite(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markParentsiteAsDirty(!equalsObject(parentsite, p));
       parentsite = p;
    }

    // sitedescr getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSitedescrDirty()  { return checkFieldDirtiness(SITEDESCR_DIRTYGROUP, SITEDESCR_DIRTYMASK); }

    public java.lang.String   getSitedescr()         { return sitedescr; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSitedescrAsString() { return (sitedescr == null) ? "" : sitedescr; }

    // sitedescr setter methods.
    
    protected void markSitedescrAsDirty(boolean aFlag)  { markFieldAsDirty(SITEDESCR_DIRTYGROUP, SITEDESCR_DIRTYMASK, aFlag); }


    public void setSitedescr(String  p)
    {
       setSitedescr(p, DTOCasingStyle.none);
    }
    
    public void setSitedescr(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSitedescrAsDirty(!equalsObject(sitedescr, p));
       sitedescr = p;
    }

    // sitelanguages getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSitelanguagesDirty()  { return checkFieldDirtiness(SITELANGUAGES_DIRTYGROUP, SITELANGUAGES_DIRTYMASK); }

    public java.lang.String   getSitelanguages()         { return sitelanguages; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSitelanguagesAsString() { return (sitelanguages == null) ? "" : sitelanguages; }

    // sitelanguages setter methods.
    
    protected void markSitelanguagesAsDirty(boolean aFlag)  { markFieldAsDirty(SITELANGUAGES_DIRTYGROUP, SITELANGUAGES_DIRTYMASK, aFlag); }


    public void setSitelanguages(String  p)
    {
       setSitelanguages(p, DTOCasingStyle.none);
    }
    
    public void setSitelanguages(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSitelanguagesAsDirty(!equalsObject(sitelanguages, p));
       sitelanguages = p;
    }

    // sitesummary getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSitesummaryDirty()  { return checkFieldDirtiness(SITESUMMARY_DIRTYGROUP, SITESUMMARY_DIRTYMASK); }

    public java.lang.String   getSitesummary()         { return sitesummary; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSitesummaryAsString() { return (sitesummary == null) ? "" : sitesummary; }

    // sitesummary setter methods.
    
    protected void markSitesummaryAsDirty(boolean aFlag)  { markFieldAsDirty(SITESUMMARY_DIRTYGROUP, SITESUMMARY_DIRTYMASK, aFlag); }


    public void setSitesummary(String  p)
    {
       setSitesummary(p, DTOCasingStyle.none);
    }
    
    public void setSitesummary(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSitesummaryAsDirty(!equalsObject(sitesummary, p));
       sitesummary = p;
    }

    // sitedomain getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSitedomainDirty()  { return checkFieldDirtiness(SITEDOMAIN_DIRTYGROUP, SITEDOMAIN_DIRTYMASK); }

    public java.lang.String   getSitedomain()         { return sitedomain; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSitedomainAsString() { return (sitedomain == null) ? "" : sitedomain; }

    // sitedomain setter methods.
    
    protected void markSitedomainAsDirty(boolean aFlag)  { markFieldAsDirty(SITEDOMAIN_DIRTYGROUP, SITEDOMAIN_DIRTYMASK, aFlag); }


    public void setSitedomain(String  p)
    {
       setSitedomain(p, DTOCasingStyle.none);
    }
    
    public void setSitedomain(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSitedomainAsDirty(!equalsObject(sitedomain, p));
       sitedomain = p;
    }

    // calendarid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isCalendaridDirty()  { return checkFieldDirtiness(CALENDARID_DIRTYGROUP, CALENDARID_DIRTYMASK); }

    public java.lang.String   getCalendarid()         { return calendarid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getCalendaridAsString() { return (calendarid == null) ? "" : calendarid; }

    // calendarid setter methods.
    
    protected void markCalendaridAsDirty(boolean aFlag)  { markFieldAsDirty(CALENDARID_DIRTYGROUP, CALENDARID_DIRTYMASK, aFlag); }


    public void setCalendarid(String  p)
    {
       setCalendarid(p, DTOCasingStyle.none);
    }
    
    public void setCalendarid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCalendaridAsDirty(!equalsObject(calendarid, p));
       calendarid = p;
    }

    // hostname getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isHostnameDirty()  { return checkFieldDirtiness(HOSTNAME_DIRTYGROUP, HOSTNAME_DIRTYMASK); }

    public java.lang.String   getHostname()         { return hostname; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getHostnameAsString() { return (hostname == null) ? "" : hostname; }

    // hostname setter methods.
    
    protected void markHostnameAsDirty(boolean aFlag)  { markFieldAsDirty(HOSTNAME_DIRTYGROUP, HOSTNAME_DIRTYMASK, aFlag); }


    public void setHostname(String  p)
    {
       setHostname(p, DTOCasingStyle.none);
    }
    
    public void setHostname(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markHostnameAsDirty(!equalsObject(hostname, p));
       hostname = p;
    }

    // homeurl getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isHomeurlDirty()  { return checkFieldDirtiness(HOMEURL_DIRTYGROUP, HOMEURL_DIRTYMASK); }

    public java.lang.String   getHomeurl()         { return homeurl; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getHomeurlAsString() { return (homeurl == null) ? "" : homeurl; }

    // homeurl setter methods.
    
    protected void markHomeurlAsDirty(boolean aFlag)  { markFieldAsDirty(HOMEURL_DIRTYGROUP, HOMEURL_DIRTYMASK, aFlag); }


    public void setHomeurl(String  p)
    {
       setHomeurl(p, DTOCasingStyle.none);
    }
    
    public void setHomeurl(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markHomeurlAsDirty(!equalsObject(homeurl, p));
       homeurl = p;
    }

    // consoleurl getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isConsoleurlDirty()  { return checkFieldDirtiness(CONSOLEURL_DIRTYGROUP, CONSOLEURL_DIRTYMASK); }

    public java.lang.String   getConsoleurl()         { return consoleurl; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getConsoleurlAsString() { return (consoleurl == null) ? "" : consoleurl; }

    // consoleurl setter methods.
    
    protected void markConsoleurlAsDirty(boolean aFlag)  { markFieldAsDirty(CONSOLEURL_DIRTYGROUP, CONSOLEURL_DIRTYMASK, aFlag); }


    public void setConsoleurl(String  p)
    {
       setConsoleurl(p, DTOCasingStyle.none);
    }
    
    public void setConsoleurl(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markConsoleurlAsDirty(!equalsObject(consoleurl, p));
       consoleurl = p;
    }

    // sitetype getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    public boolean isSitetypeDirty()  { return checkFieldDirtiness(SITETYPE_DIRTYGROUP, SITETYPE_DIRTYMASK); }

    public java.lang.String   getSitetype()         { return sitetype; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    public java.lang.String   getSitetypeAsString() { return (sitetype == null) ? "" : sitetype; }

    // sitetype setter methods.
    
    protected void markSitetypeAsDirty(boolean aFlag)  { markFieldAsDirty(SITETYPE_DIRTYGROUP, SITETYPE_DIRTYMASK, aFlag); }


    public void setSitetype(String  p)
    {
       setSitetype(p, DTOCasingStyle.none);
    }
    
    public void setSitetype(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSitetypeAsDirty(!equalsObject(sitetype, p));
       sitetype = p;
    }

}
