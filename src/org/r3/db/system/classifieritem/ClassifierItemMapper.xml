<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
  TODO: xmlCopyRight.txt
   
  -->
<!--
  TODO: xmlReadme.txt
   
  -->

<!-- <mapper resource="org/r3/db/system/classifieritem/ClassifierItemMapper.xml"/> -->
<mapper namespace="org.r3.db.system.classifieritem.ClassifierItemMapper" >
    <resultMap id="BaseResultMap" type="org.r3.db.system.classifieritem.ClassifierItemDTO" >
         <id column="clsitemid" property="clsitemid" jdbcType="VARCHAR" />
           <result column="site" property="site" jdbcType="VARCHAR" />
           <result column="clsid" property="clsid" jdbcType="VARCHAR" />
           <result column="clsitembusid" property="clsitembusid" jdbcType="VARCHAR" />
           <result column="parentitemid" property="parentitemid" jdbcType="VARCHAR" />
           <result column="classifieritemdescr" property="classifieritemdescr" jdbcType="VARCHAR" />
           <result column="classifieritempath" property="classifieritempath" jdbcType="VARCHAR" />
           <result column="classifieritemdepth" property="classifieritemdepth" jdbcType="INTEGER" />
           <result column="classifieritemorder" property="classifieritemorder" jdbcType="INTEGER" />
           <result column="classifieritemiattr" property="classifieritemiattr" jdbcType="INTEGER" />
           <result column="classifieritemsattr" property="classifieritemsattr" jdbcType="VARCHAR" />
    </resultMap>

  <sql id="Filter_Where_Clause" >
    <where >
      <foreach collection="filter.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
                <when test="criterion.subSelectCriterion" >
                  and ${criterion.prefixCondition} #{criterion.value} ${criterion.suffixCondition}
                </when>                                
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <!--
  <sql id="Filter_Where_Clause_4_Update" >
    <where >
      <foreach collection="filter.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  -->  
  <sql id="Base_Column_List" >
    clsitemid,  site,  clsid,  clsitembusid,  parentitemid,  classifieritemdescr,  classifieritempath,  classifieritemdepth,  classifieritemorder,
  classifieritemiattr,  classifieritemsattr  </sql>
  <select id="selectByClsitemid" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from r3_classifieritem
    where clsitemid = #{clsitemid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByClsitemid" parameterType="map" >
    delete
    from r3_classifieritem
    where clsitemid = #{clsitemid,jdbcType=VARCHAR}
  </delete>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from r3_classifieritem    
    where  clsitemid = #{pk.clsitemid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete
    from r3_classifieritem
    where  clsitemid = #{pk.clsitemid,jdbcType=VARCHAR}
  </delete>  
  <select id="select" resultMap="BaseResultMap" parameterType="map" >
    select
    <if test="filter != null &amp;&amp; filter.distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from r3_classifieritem
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
    <if test="filter != null &amp;&amp; filter.orderByClause != null" >
      order by ${filter.orderByClause}
    </if>
    <if test="filter != null &amp;&amp; filter.limitFetch > 0" >
      limit ${filter.limitFetch}
    </if>
  </select>
  <select id="count" parameterType="map" resultType="java.lang.Integer" >
    select count(*) from r3_classifieritem
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
  </select>  
  <delete id="delete" parameterType="map" >
    delete from r3_classifieritem
    <!-- _parameter: dato che e' una map lo sostituisco con il nome del parametro in quanto non Ã¨ l'unico -->
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="map" >
    insert into r3_classifieritem (
 clsitemid, site, clsid, clsitembusid, parentitemid, classifieritemdescr, classifieritempath, classifieritemdepth, classifieritemorder,
 classifieritemiattr, classifieritemsattr      )
    values (
 
 #{record.clsitemid,jdbcType=VARCHAR}, 
 #{record.site,jdbcType=VARCHAR}, 
 #{record.clsid,jdbcType=VARCHAR}, 
 #{record.clsitembusid,jdbcType=VARCHAR},
 
 #{record.parentitemid,jdbcType=VARCHAR}, 
 #{record.classifieritemdescr,jdbcType=VARCHAR}, 
 #{record.classifieritempath,jdbcType=VARCHAR}, 
 #{record.classifieritemdepth,jdbcType=INTEGER},
 
 #{record.classifieritemorder,jdbcType=INTEGER}, 
 #{record.classifieritemiattr,jdbcType=INTEGER}, 
 #{record.classifieritemsattr,jdbcType=VARCHAR}
      )
  </insert>
  <update id="update" parameterType="map" >
    update r3_classifieritem
    <set >
      <if test="record.siteDirty" >
        site = #{record.site,jdbcType=VARCHAR},
      </if>      
      <if test="record.clsidDirty" >
        clsid = #{record.clsid,jdbcType=VARCHAR},
      </if>      
      <if test="record.clsitembusidDirty" >
        clsitembusid = #{record.clsitembusid,jdbcType=VARCHAR},
      </if>      
      <if test="record.parentitemidDirty" >
        parentitemid = #{record.parentitemid,jdbcType=VARCHAR},
      </if>      
      <if test="record.classifieritemdescrDirty" >
        classifieritemdescr = #{record.classifieritemdescr,jdbcType=VARCHAR},
      </if>      
      <if test="record.classifieritempathDirty" >
        classifieritempath = #{record.classifieritempath,jdbcType=VARCHAR},
      </if>      
      <if test="record.classifieritemdepthDirty" >
        classifieritemdepth = #{record.classifieritemdepth,jdbcType=INTEGER},
      </if>      
      <if test="record.classifieritemorderDirty" >
        classifieritemorder = #{record.classifieritemorder,jdbcType=INTEGER},
      </if>      
      <if test="record.classifieritemiattrDirty" >
        classifieritemiattr = #{record.classifieritemiattr,jdbcType=INTEGER},
      </if>      
      <if test="record.classifieritemsattrDirty" >
        classifieritemsattr = #{record.classifieritemsattr,jdbcType=VARCHAR},
      </if>      
    </set>
    <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
      <!-- Non dovrebbe servire in quanto il filter e' sempre named. -->
      <!-- <include refid="Filter_Where_Clause_4_Update" /> -->
    </if>
  </update>
  <update id="updateByPrimaryKey" parameterType="map" >
    update r3_classifieritem
    <set >
      <if test="record.siteDirty" >
        site = #{record.site,jdbcType=VARCHAR},
      </if>
      <if test="record.clsidDirty" >
        clsid = #{record.clsid,jdbcType=VARCHAR},
      </if>
      <if test="record.clsitembusidDirty" >
        clsitembusid = #{record.clsitembusid,jdbcType=VARCHAR},
      </if>
      <if test="record.parentitemidDirty" >
        parentitemid = #{record.parentitemid,jdbcType=VARCHAR},
      </if>
      <if test="record.classifieritemdescrDirty" >
        classifieritemdescr = #{record.classifieritemdescr,jdbcType=VARCHAR},
      </if>
      <if test="record.classifieritempathDirty" >
        classifieritempath = #{record.classifieritempath,jdbcType=VARCHAR},
      </if>
      <if test="record.classifieritemdepthDirty" >
        classifieritemdepth = #{record.classifieritemdepth,jdbcType=INTEGER},
      </if>
      <if test="record.classifieritemorderDirty" >
        classifieritemorder = #{record.classifieritemorder,jdbcType=INTEGER},
      </if>
      <if test="record.classifieritemiattrDirty" >
        classifieritemiattr = #{record.classifieritemiattr,jdbcType=INTEGER},
      </if>
      <if test="record.classifieritemsattrDirty" >
        classifieritemsattr = #{record.classifieritemsattr,jdbcType=VARCHAR},
      </if>
    </set>
    where  clsitemid = #{record.clsitemid,jdbcType=VARCHAR}
  </update>

  <!-- Estensione per coprire anche il numero dei figli? -->
  <sql id="Base_Column_List_WNOC" >
    clsitemid,  site,  clsid,  clsitembusid,  c1.parentitemid,  classifieritemdescr,  classifieritempath,  classifieritemdepth,  classifieritemorder,
    classifieritemiattr,  classifieritemsattr, numchildren</sql>

  <resultMap id="BaseResultMap_WNOC" type="org.r3.db.system.classifieritem.ClassifierItemDTO" >
         <id column="clsitemid" property="clsitemid" jdbcType="VARCHAR" />
           <result column="site" property="site" jdbcType="VARCHAR" />
           <result column="clsid" property="clsid" jdbcType="VARCHAR" />
           <result column="clsitembusid" property="clsitembusid" jdbcType="VARCHAR" />
           <result column="parentitemid" property="parentitemid" jdbcType="VARCHAR" />
           <result column="classifieritemdescr" property="classifieritemdescr" jdbcType="VARCHAR" />
           <result column="classifieritempath" property="classifieritempath"   jdbcType="VARCHAR" />
           <result column="classifieritemdepth" property="classifieritemdepth" jdbcType="INTEGER" />
           <result column="classifieritemorder" property="classifieritemorder" jdbcType="INTEGER" />
           <result column="classifieritemiattr" property="classifieritemiattr" jdbcType="INTEGER" />
           <result column="classifieritemsattr" property="classifieritemsattr" jdbcType="VARCHAR" />
           <result column="numchildren"         property="numberofchildren"    jdbcType="INTEGER" />
  </resultMap>
        
  <select id="select_WNOC" resultMap="BaseResultMap_WNOC" parameterType="map" >
  select 
  <include refid="Base_Column_List_WNOC" />
  from r3_classifieritem c1
  left join 
  (
    select parentitemid, count(*) as numChildren from r3_classifieritem
    where parentitemid is not null
    group by parentitemid
  ) c2 on c1.clsitemid = c2.parentitemid

  <if test="filter != null" >
      <include refid="Filter_Where_Clause" />
  </if>
  <if test="filter != null &amp;&amp; filter.orderByClause != null" >
      order by ${filter.orderByClause}
  </if>
  <if test="filter != null &amp;&amp; filter.limitFetch > 0" >
      limit ${filter.limitFetch}
  </if>
  </select>

</mapper>
