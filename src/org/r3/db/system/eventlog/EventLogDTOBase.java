//
// generated by jGAMe Software - GPA Gruppo Progetti Avanzati s.r.l. 2016-2017
//
//
// README Section
//


package org.r3.db.system.eventlog;

import org.r3.db.utils.*;

@org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
@javax.xml.bind.annotation.XmlRootElement(name = "EventLogDTOBase")
public class EventLogDTOBase extends org.r3.db.DTOBase
{
    int[] dirtyFlagsArray;

    protected java.lang.Integer  eventid;
    protected java.lang.String  site;
    protected java.lang.String  usecaseambit;
    protected java.lang.String  usecase;
    protected java.lang.String  reason;
    protected java.lang.String  refentityid1;
    protected java.lang.String  refentityid2;
    protected java.lang.String  refentityid3;
    protected java.lang.String  refentityid4;
    protected java.lang.String  refentityid5;
    protected java.sql.Timestamp  refdate1;
    protected java.sql.Timestamp  refdate2;
    protected java.lang.Integer  counter1;
    protected java.lang.Integer  counter2;
    protected java.lang.Integer  counter3;
    protected java.lang.String  msg;
    protected java.lang.String  userid;
    protected java.lang.String  usersessionid;
    protected java.lang.String  recstatus;
    protected java.sql.Timestamp  rectimestamp;

    public static final java.lang.Integer EVENTID_DEFAULT  =  null;
    public static final java.lang.String SITE_DEFAULT  =  null;
    public static final java.lang.String USECASEAMBIT_DEFAULT  =  null;
    public static final java.lang.String USECASE_DEFAULT  =  null;
    public static final java.lang.String REASON_DEFAULT  =  null;
    public static final java.lang.String REFENTITYID1_DEFAULT  =  null;
    public static final java.lang.String REFENTITYID2_DEFAULT  =  null;
    public static final java.lang.String REFENTITYID3_DEFAULT  =  null;
    public static final java.lang.String REFENTITYID4_DEFAULT  =  null;
    public static final java.lang.String REFENTITYID5_DEFAULT  =  null;
    public static final java.sql.Timestamp REFDATE1_DEFAULT  =  null;
    public static final java.sql.Timestamp REFDATE2_DEFAULT  =  null;
    public static final java.lang.Integer COUNTER1_DEFAULT  =  null;
    public static final java.lang.Integer COUNTER2_DEFAULT  =  null;
    public static final java.lang.Integer COUNTER3_DEFAULT  =  null;
    public static final java.lang.String MSG_DEFAULT  =  null;
    public static final java.lang.String USERID_DEFAULT  =  null;
    public static final java.lang.String USERSESSIONID_DEFAULT  =  null;
    public static final java.lang.String RECSTATUS_DEFAULT  =  null;
    public static final java.sql.Timestamp RECTIMESTAMP_DEFAULT  =  null;

    public static final int EVENTID_DIRTYGROUP  =  0;
    public static final int EVENTID_DIRTYMASK   =  1;
    public static final int SITE_DIRTYGROUP  =  0;
    public static final int SITE_DIRTYMASK   =  2;
    public static final int USECASEAMBIT_DIRTYGROUP  =  0;
    public static final int USECASEAMBIT_DIRTYMASK   =  4;
    public static final int USECASE_DIRTYGROUP  =  0;
    public static final int USECASE_DIRTYMASK   =  8;
    public static final int REASON_DIRTYGROUP  =  0;
    public static final int REASON_DIRTYMASK   =  16;
    public static final int REFENTITYID1_DIRTYGROUP  =  0;
    public static final int REFENTITYID1_DIRTYMASK   =  32;
    public static final int REFENTITYID2_DIRTYGROUP  =  0;
    public static final int REFENTITYID2_DIRTYMASK   =  64;
    public static final int REFENTITYID3_DIRTYGROUP  =  0;
    public static final int REFENTITYID3_DIRTYMASK   =  128;
    public static final int REFENTITYID4_DIRTYGROUP  =  0;
    public static final int REFENTITYID4_DIRTYMASK   =  256;
    public static final int REFENTITYID5_DIRTYGROUP  =  0;
    public static final int REFENTITYID5_DIRTYMASK   =  512;
    public static final int REFDATE1_DIRTYGROUP  =  0;
    public static final int REFDATE1_DIRTYMASK   =  1024;
    public static final int REFDATE2_DIRTYGROUP  =  0;
    public static final int REFDATE2_DIRTYMASK   =  2048;
    public static final int COUNTER1_DIRTYGROUP  =  0;
    public static final int COUNTER1_DIRTYMASK   =  4096;
    public static final int COUNTER2_DIRTYGROUP  =  0;
    public static final int COUNTER2_DIRTYMASK   =  8192;
    public static final int COUNTER3_DIRTYGROUP  =  0;
    public static final int COUNTER3_DIRTYMASK   =  16384;
    public static final int MSG_DIRTYGROUP  =  0;
    public static final int MSG_DIRTYMASK   =  32768;
    public static final int USERID_DIRTYGROUP  =  0;
    public static final int USERID_DIRTYMASK   =  65536;
    public static final int USERSESSIONID_DIRTYGROUP  =  0;
    public static final int USERSESSIONID_DIRTYMASK   =  131072;
    public static final int RECSTATUS_DIRTYGROUP  =  0;
    public static final int RECSTATUS_DIRTYMASK   =  262144;
    public static final int RECTIMESTAMP_DIRTYGROUP  =  0;
    public static final int RECTIMESTAMP_DIRTYMASK   =  524288;


    /**
      * DataBean constructor.
      */
    public EventLogDTOBase()
    {
       dirtyFlagsArray = new int[20 / 30 + 1];
       clearDirtyFlags();

       eventid = EVENTID_DEFAULT;
       site = SITE_DEFAULT;
       usecaseambit = USECASEAMBIT_DEFAULT;
       usecase = USECASE_DEFAULT;
       reason = REASON_DEFAULT;
       refentityid1 = REFENTITYID1_DEFAULT;
       refentityid2 = REFENTITYID2_DEFAULT;
       refentityid3 = REFENTITYID3_DEFAULT;
       refentityid4 = REFENTITYID4_DEFAULT;
       refentityid5 = REFENTITYID5_DEFAULT;
       refdate1 = REFDATE1_DEFAULT;
       refdate2 = REFDATE2_DEFAULT;
       counter1 = COUNTER1_DEFAULT;
       counter2 = COUNTER2_DEFAULT;
       counter3 = COUNTER3_DEFAULT;
       msg = MSG_DEFAULT;
       userid = USERID_DEFAULT;
       usersessionid = USERSESSIONID_DEFAULT;
       recstatus = RECSTATUS_DEFAULT;
       rectimestamp = RECTIMESTAMP_DEFAULT;
    }

    /**
      * Copy constructor.
      */
    public EventLogDTOBase(EventLogDTOBase another)
    {

       eventid = another.getEventid();
       site = another.getSite();
       usecaseambit = another.getUsecaseambit();
       usecase = another.getUsecase();
       reason = another.getReason();
       refentityid1 = another.getRefentityid1();
       refentityid2 = another.getRefentityid2();
       refentityid3 = another.getRefentityid3();
       refentityid4 = another.getRefentityid4();
       refentityid5 = another.getRefentityid5();
       refdate1 = another.getRefdate1();
       refdate2 = another.getRefdate2();
       counter1 = another.getCounter1();
       counter2 = another.getCounter2();
       counter3 = another.getCounter3();
       msg = another.getMsg();
       userid = another.getUserid();
       usersessionid = another.getUsersessionid();
       recstatus = another.getRecstatus();
       rectimestamp = another.getRectimestamp();

       dirtyFlagsArray = another.getCopyOfDirtyFlags();
    }

    public void clearDirtyFlags()
    {
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            dirtyFlagsArray[i] = 0;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public int[] getCopyOfDirtyFlags()
    {
       int[] copyOf = new int[dirtyFlagsArray.length];
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            copyOf[i] = dirtyFlagsArray[i];

       return copyOf;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public boolean isDirty()
    {
    	for(int i = 0; i < dirtyFlagsArray.length; i++)
    	if (dirtyFlagsArray[i] != 0)
    		return true;
    	
    	return false;
    }
    
    protected void markFieldAsDirty(int mainIndex, int bitwiseIndex, boolean aFlag)
    {
       if (aFlag)
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] | bitwiseIndex;
       else
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] & ~bitwiseIndex;
    }

    protected boolean checkFieldDirtiness(int mainIndex, int bitwiseIndex)
    {
       return (dirtyFlagsArray[mainIndex] & bitwiseIndex) != 0;
    }

    public String getDtokey()
    {
        StringBuilder stb = new StringBuilder();
        stb.append(eventid);
        return stb.toString();
    }

    public String getDtodescr()
    {
        boolean notNull = false;
        StringBuilder stb = new StringBuilder();
        if (usecase != null)
        {
        stb.append(usecase);
        notNull = true;        
        }
        if (notNull)
            return stb.toString();
            
        return null;
    }

    /**
      * DataBean Getter And Setter Accessor
      */

    // eventid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isEventidDirty()  { return checkFieldDirtiness(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK); }

    public java.lang.Integer   getEventid() { return eventid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "eventid")
    public String getEventidAsString() { return integerAsString(eventid); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getEventidAsInt()    { return eventid != null ? eventid.intValue() : 0; }

    // eventid setter methods.
    
    protected void markEventidAsDirty(boolean aFlag)  { markFieldAsDirty(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK, aFlag); }


    public void setEventid(java.lang.Integer  p)
    {
        markEventidAsDirty(!equalsObject(eventid, p));
    	eventid = p;
    }
    public void setEventidAsInt(int p)
    {
    	setEventid(new java.lang.Integer(p));
    }
    public void setEventid()
    {
    	setEventid(0);
    }
    public void setEventidAsString(String  p)
    {
    	setEventid(stringAsInteger(p));
    }

    // site getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isSiteDirty()  { return checkFieldDirtiness(SITE_DIRTYGROUP, SITE_DIRTYMASK); }

    public java.lang.String   getSite()         { return site; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "site")
    public java.lang.String   getSiteAsString() { return (site == null) ? "" : site; }

    // site setter methods.
    
    protected void markSiteAsDirty(boolean aFlag)  { markFieldAsDirty(SITE_DIRTYGROUP, SITE_DIRTYMASK, aFlag); }


    public void setSite(String  p)
    {
       setSite(p, DTOCasingStyle.none);
    }
    
    public void setSite(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSiteAsDirty(!equalsObject(site, p));
       site = p;
    }

    // usecaseambit getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isUsecaseambitDirty()  { return checkFieldDirtiness(USECASEAMBIT_DIRTYGROUP, USECASEAMBIT_DIRTYMASK); }

    public java.lang.String   getUsecaseambit()         { return usecaseambit; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "usecaseambit")
    public java.lang.String   getUsecaseambitAsString() { return (usecaseambit == null) ? "" : usecaseambit; }

    // usecaseambit setter methods.
    
    protected void markUsecaseambitAsDirty(boolean aFlag)  { markFieldAsDirty(USECASEAMBIT_DIRTYGROUP, USECASEAMBIT_DIRTYMASK, aFlag); }


    public void setUsecaseambit(String  p)
    {
       setUsecaseambit(p, DTOCasingStyle.none);
    }
    
    public void setUsecaseambit(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markUsecaseambitAsDirty(!equalsObject(usecaseambit, p));
       usecaseambit = p;
    }

    // usecase getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isUsecaseDirty()  { return checkFieldDirtiness(USECASE_DIRTYGROUP, USECASE_DIRTYMASK); }

    public java.lang.String   getUsecase()         { return usecase; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "usecase")
    public java.lang.String   getUsecaseAsString() { return (usecase == null) ? "" : usecase; }

    // usecase setter methods.
    
    protected void markUsecaseAsDirty(boolean aFlag)  { markFieldAsDirty(USECASE_DIRTYGROUP, USECASE_DIRTYMASK, aFlag); }


    public void setUsecase(String  p)
    {
       setUsecase(p, DTOCasingStyle.none);
    }
    
    public void setUsecase(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markUsecaseAsDirty(!equalsObject(usecase, p));
       usecase = p;
    }

    // reason getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isReasonDirty()  { return checkFieldDirtiness(REASON_DIRTYGROUP, REASON_DIRTYMASK); }

    public java.lang.String   getReason()         { return reason; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "reason")
    public java.lang.String   getReasonAsString() { return (reason == null) ? "" : reason; }

    // reason setter methods.
    
    protected void markReasonAsDirty(boolean aFlag)  { markFieldAsDirty(REASON_DIRTYGROUP, REASON_DIRTYMASK, aFlag); }


    public void setReason(String  p)
    {
       setReason(p, DTOCasingStyle.none);
    }
    
    public void setReason(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markReasonAsDirty(!equalsObject(reason, p));
       reason = p;
    }

    // refentityid1 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefentityid1Dirty()  { return checkFieldDirtiness(REFENTITYID1_DIRTYGROUP, REFENTITYID1_DIRTYMASK); }

    public java.lang.String   getRefentityid1()         { return refentityid1; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refentityid1")
    public java.lang.String   getRefentityid1AsString() { return (refentityid1 == null) ? "" : refentityid1; }

    // refentityid1 setter methods.
    
    protected void markRefentityid1AsDirty(boolean aFlag)  { markFieldAsDirty(REFENTITYID1_DIRTYGROUP, REFENTITYID1_DIRTYMASK, aFlag); }


    public void setRefentityid1(String  p)
    {
       setRefentityid1(p, DTOCasingStyle.none);
    }
    
    public void setRefentityid1(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRefentityid1AsDirty(!equalsObject(refentityid1, p));
       refentityid1 = p;
    }

    // refentityid2 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefentityid2Dirty()  { return checkFieldDirtiness(REFENTITYID2_DIRTYGROUP, REFENTITYID2_DIRTYMASK); }

    public java.lang.String   getRefentityid2()         { return refentityid2; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refentityid2")
    public java.lang.String   getRefentityid2AsString() { return (refentityid2 == null) ? "" : refentityid2; }

    // refentityid2 setter methods.
    
    protected void markRefentityid2AsDirty(boolean aFlag)  { markFieldAsDirty(REFENTITYID2_DIRTYGROUP, REFENTITYID2_DIRTYMASK, aFlag); }


    public void setRefentityid2(String  p)
    {
       setRefentityid2(p, DTOCasingStyle.none);
    }
    
    public void setRefentityid2(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRefentityid2AsDirty(!equalsObject(refentityid2, p));
       refentityid2 = p;
    }

    // refentityid3 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefentityid3Dirty()  { return checkFieldDirtiness(REFENTITYID3_DIRTYGROUP, REFENTITYID3_DIRTYMASK); }

    public java.lang.String   getRefentityid3()         { return refentityid3; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refentityid3")
    public java.lang.String   getRefentityid3AsString() { return (refentityid3 == null) ? "" : refentityid3; }

    // refentityid3 setter methods.
    
    protected void markRefentityid3AsDirty(boolean aFlag)  { markFieldAsDirty(REFENTITYID3_DIRTYGROUP, REFENTITYID3_DIRTYMASK, aFlag); }


    public void setRefentityid3(String  p)
    {
       setRefentityid3(p, DTOCasingStyle.none);
    }
    
    public void setRefentityid3(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRefentityid3AsDirty(!equalsObject(refentityid3, p));
       refentityid3 = p;
    }

    // refentityid4 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefentityid4Dirty()  { return checkFieldDirtiness(REFENTITYID4_DIRTYGROUP, REFENTITYID4_DIRTYMASK); }

    public java.lang.String   getRefentityid4()         { return refentityid4; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refentityid4")
    public java.lang.String   getRefentityid4AsString() { return (refentityid4 == null) ? "" : refentityid4; }

    // refentityid4 setter methods.
    
    protected void markRefentityid4AsDirty(boolean aFlag)  { markFieldAsDirty(REFENTITYID4_DIRTYGROUP, REFENTITYID4_DIRTYMASK, aFlag); }


    public void setRefentityid4(String  p)
    {
       setRefentityid4(p, DTOCasingStyle.none);
    }
    
    public void setRefentityid4(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRefentityid4AsDirty(!equalsObject(refentityid4, p));
       refentityid4 = p;
    }

    // refentityid5 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefentityid5Dirty()  { return checkFieldDirtiness(REFENTITYID5_DIRTYGROUP, REFENTITYID5_DIRTYMASK); }

    public java.lang.String   getRefentityid5()         { return refentityid5; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refentityid5")
    public java.lang.String   getRefentityid5AsString() { return (refentityid5 == null) ? "" : refentityid5; }

    // refentityid5 setter methods.
    
    protected void markRefentityid5AsDirty(boolean aFlag)  { markFieldAsDirty(REFENTITYID5_DIRTYGROUP, REFENTITYID5_DIRTYMASK, aFlag); }


    public void setRefentityid5(String  p)
    {
       setRefentityid5(p, DTOCasingStyle.none);
    }
    
    public void setRefentityid5(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRefentityid5AsDirty(!equalsObject(refentityid5, p));
       refentityid5 = p;
    }

    // refdate1 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefdate1Dirty()  { return checkFieldDirtiness(REFDATE1_DIRTYGROUP, REFDATE1_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getRefdate1() { return refdate1; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refdate1")
    public String getRefdate1AsString() { return timestampAsString(refdate1, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getRefdate1AsString(java.text.DateFormat aDateFormat) { return timestampAsString(refdate1, aDateFormat); }

    // refdate1 setter methods.
    
    protected void markRefdate1AsDirty(boolean aFlag)  { markFieldAsDirty(REFDATE1_DIRTYGROUP, REFDATE1_DIRTYMASK, aFlag); }


    public void setRefdate1(java.sql.Timestamp  p)
    {
        markRefdate1AsDirty(!equalsObject(refdate1, p));
    	refdate1 = p;
    }
    public void setRefdate1(String  p, java.text.DateFormat aDateFormat)
    {
    	setRefdate1(stringAsTimestamp(p, aDateFormat));
    }

    // refdate2 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRefdate2Dirty()  { return checkFieldDirtiness(REFDATE2_DIRTYGROUP, REFDATE2_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getRefdate2() { return refdate2; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "refdate2")
    public String getRefdate2AsString() { return timestampAsString(refdate2, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getRefdate2AsString(java.text.DateFormat aDateFormat) { return timestampAsString(refdate2, aDateFormat); }

    // refdate2 setter methods.
    
    protected void markRefdate2AsDirty(boolean aFlag)  { markFieldAsDirty(REFDATE2_DIRTYGROUP, REFDATE2_DIRTYMASK, aFlag); }


    public void setRefdate2(java.sql.Timestamp  p)
    {
        markRefdate2AsDirty(!equalsObject(refdate2, p));
    	refdate2 = p;
    }
    public void setRefdate2(String  p, java.text.DateFormat aDateFormat)
    {
    	setRefdate2(stringAsTimestamp(p, aDateFormat));
    }

    // counter1 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCounter1Dirty()  { return checkFieldDirtiness(COUNTER1_DIRTYGROUP, COUNTER1_DIRTYMASK); }

    public java.lang.Integer   getCounter1() { return counter1; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "counter1")
    public String getCounter1AsString() { return integerAsString(counter1); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getCounter1AsInt()    { return counter1 != null ? counter1.intValue() : 0; }

    // counter1 setter methods.
    
    protected void markCounter1AsDirty(boolean aFlag)  { markFieldAsDirty(COUNTER1_DIRTYGROUP, COUNTER1_DIRTYMASK, aFlag); }


    public void setCounter1(java.lang.Integer  p)
    {
        markCounter1AsDirty(!equalsObject(counter1, p));
    	counter1 = p;
    }
    public void setCounter1AsInt(int p)
    {
    	setCounter1(new java.lang.Integer(p));
    }
    public void setCounter1()
    {
    	setCounter1(0);
    }
    public void setCounter1AsString(String  p)
    {
    	setCounter1(stringAsInteger(p));
    }

    // counter2 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCounter2Dirty()  { return checkFieldDirtiness(COUNTER2_DIRTYGROUP, COUNTER2_DIRTYMASK); }

    public java.lang.Integer   getCounter2() { return counter2; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "counter2")
    public String getCounter2AsString() { return integerAsString(counter2); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getCounter2AsInt()    { return counter2 != null ? counter2.intValue() : 0; }

    // counter2 setter methods.
    
    protected void markCounter2AsDirty(boolean aFlag)  { markFieldAsDirty(COUNTER2_DIRTYGROUP, COUNTER2_DIRTYMASK, aFlag); }


    public void setCounter2(java.lang.Integer  p)
    {
        markCounter2AsDirty(!equalsObject(counter2, p));
    	counter2 = p;
    }
    public void setCounter2AsInt(int p)
    {
    	setCounter2(new java.lang.Integer(p));
    }
    public void setCounter2()
    {
    	setCounter2(0);
    }
    public void setCounter2AsString(String  p)
    {
    	setCounter2(stringAsInteger(p));
    }

    // counter3 getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCounter3Dirty()  { return checkFieldDirtiness(COUNTER3_DIRTYGROUP, COUNTER3_DIRTYMASK); }

    public java.lang.Integer   getCounter3() { return counter3; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "counter3")
    public String getCounter3AsString() { return integerAsString(counter3); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getCounter3AsInt()    { return counter3 != null ? counter3.intValue() : 0; }

    // counter3 setter methods.
    
    protected void markCounter3AsDirty(boolean aFlag)  { markFieldAsDirty(COUNTER3_DIRTYGROUP, COUNTER3_DIRTYMASK, aFlag); }


    public void setCounter3(java.lang.Integer  p)
    {
        markCounter3AsDirty(!equalsObject(counter3, p));
    	counter3 = p;
    }
    public void setCounter3AsInt(int p)
    {
    	setCounter3(new java.lang.Integer(p));
    }
    public void setCounter3()
    {
    	setCounter3(0);
    }
    public void setCounter3AsString(String  p)
    {
    	setCounter3(stringAsInteger(p));
    }

    // msg getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isMsgDirty()  { return checkFieldDirtiness(MSG_DIRTYGROUP, MSG_DIRTYMASK); }

    public java.lang.String   getMsg()         { return msg; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "msg")
    public java.lang.String   getMsgAsString() { return (msg == null) ? "" : msg; }

    // msg setter methods.
    
    protected void markMsgAsDirty(boolean aFlag)  { markFieldAsDirty(MSG_DIRTYGROUP, MSG_DIRTYMASK, aFlag); }


    public void setMsg(String  p)
    {
       setMsg(p, DTOCasingStyle.none);
    }
    
    public void setMsg(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markMsgAsDirty(!equalsObject(msg, p));
       msg = p;
    }

    // userid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isUseridDirty()  { return checkFieldDirtiness(USERID_DIRTYGROUP, USERID_DIRTYMASK); }

    public java.lang.String   getUserid()         { return userid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "userid")
    public java.lang.String   getUseridAsString() { return (userid == null) ? "" : userid; }

    // userid setter methods.
    
    protected void markUseridAsDirty(boolean aFlag)  { markFieldAsDirty(USERID_DIRTYGROUP, USERID_DIRTYMASK, aFlag); }


    public void setUserid(String  p)
    {
       setUserid(p, DTOCasingStyle.none);
    }
    
    public void setUserid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markUseridAsDirty(!equalsObject(userid, p));
       userid = p;
    }

    // usersessionid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isUsersessionidDirty()  { return checkFieldDirtiness(USERSESSIONID_DIRTYGROUP, USERSESSIONID_DIRTYMASK); }

    public java.lang.String   getUsersessionid()         { return usersessionid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "usersessionid")
    public java.lang.String   getUsersessionidAsString() { return (usersessionid == null) ? "" : usersessionid; }

    // usersessionid setter methods.
    
    protected void markUsersessionidAsDirty(boolean aFlag)  { markFieldAsDirty(USERSESSIONID_DIRTYGROUP, USERSESSIONID_DIRTYMASK, aFlag); }


    public void setUsersessionid(String  p)
    {
       setUsersessionid(p, DTOCasingStyle.none);
    }
    
    public void setUsersessionid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markUsersessionidAsDirty(!equalsObject(usersessionid, p));
       usersessionid = p;
    }

    // recstatus getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRecstatusDirty()  { return checkFieldDirtiness(RECSTATUS_DIRTYGROUP, RECSTATUS_DIRTYMASK); }

    public java.lang.String   getRecstatus()         { return recstatus; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "recstatus")
    public java.lang.String   getRecstatusAsString() { return (recstatus == null) ? "" : recstatus; }

    // recstatus setter methods.
    
    protected void markRecstatusAsDirty(boolean aFlag)  { markFieldAsDirty(RECSTATUS_DIRTYGROUP, RECSTATUS_DIRTYMASK, aFlag); }


    public void setRecstatus(String  p)
    {
       setRecstatus(p, DTOCasingStyle.none);
    }
    
    public void setRecstatus(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRecstatusAsDirty(!equalsObject(recstatus, p));
       recstatus = p;
    }

    // rectimestamp getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRectimestampDirty()  { return checkFieldDirtiness(RECTIMESTAMP_DIRTYGROUP, RECTIMESTAMP_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getRectimestamp() { return rectimestamp; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "rectimestamp")
    public String getRectimestampAsString() { return timestampAsString(rectimestamp, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getRectimestampAsString(java.text.DateFormat aDateFormat) { return timestampAsString(rectimestamp, aDateFormat); }

    // rectimestamp setter methods.
    
    protected void markRectimestampAsDirty(boolean aFlag)  { markFieldAsDirty(RECTIMESTAMP_DIRTYGROUP, RECTIMESTAMP_DIRTYMASK, aFlag); }


    public void setRectimestamp(java.sql.Timestamp  p)
    {
        markRectimestampAsDirty(!equalsObject(rectimestamp, p));
    	rectimestamp = p;
    }
    public void setRectimestamp(String  p, java.text.DateFormat aDateFormat)
    {
    	setRectimestamp(stringAsTimestamp(p, aDateFormat));
    }

}
