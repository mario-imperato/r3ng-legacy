//
// generated by jGAMe Software - GPA Gruppo Progetti Avanzati s.r.l. 2016-2017
//
//
// README Section
//


package org.r3.db.system.metadata.tmetadataview;

import org.r3.db.utils.*;

@org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
@javax.xml.bind.annotation.XmlRootElement(name = "TableColumnsMetadataDTOBase")
public class TableColumnsMetadataDTOBase extends org.r3.db.DTOBase
{
    int[] dirtyFlagsArray;

    protected java.lang.String  table_schema;
    protected java.lang.String  table_name;
    protected java.lang.String  column_name;
    protected java.lang.Long  ordinal_position;
    protected java.lang.String  nullable;
    protected java.lang.String  data_type;
    protected java.lang.Long  data_length;

    public static final java.lang.String TABLE_SCHEMA_DEFAULT  =  null;
    public static final java.lang.String TABLE_NAME_DEFAULT  =  null;
    public static final java.lang.String COLUMN_NAME_DEFAULT  =  null;
    public static final java.lang.Long ORDINAL_POSITION_DEFAULT  =  null;
    public static final java.lang.String NULLABLE_DEFAULT  =  null;
    public static final java.lang.String DATA_TYPE_DEFAULT  =  null;
    public static final java.lang.Long DATA_LENGTH_DEFAULT  =  null;

    public static final int TABLE_SCHEMA_DIRTYGROUP  =  0;
    public static final int TABLE_SCHEMA_DIRTYMASK   =  1;
    public static final int TABLE_NAME_DIRTYGROUP  =  0;
    public static final int TABLE_NAME_DIRTYMASK   =  2;
    public static final int COLUMN_NAME_DIRTYGROUP  =  0;
    public static final int COLUMN_NAME_DIRTYMASK   =  4;
    public static final int ORDINAL_POSITION_DIRTYGROUP  =  0;
    public static final int ORDINAL_POSITION_DIRTYMASK   =  8;
    public static final int NULLABLE_DIRTYGROUP  =  0;
    public static final int NULLABLE_DIRTYMASK   =  16;
    public static final int DATA_TYPE_DIRTYGROUP  =  0;
    public static final int DATA_TYPE_DIRTYMASK   =  32;
    public static final int DATA_LENGTH_DIRTYGROUP  =  0;
    public static final int DATA_LENGTH_DIRTYMASK   =  64;


    /**
      * DataBean constructor.
      */
    public TableColumnsMetadataDTOBase()
    {
       dirtyFlagsArray = new int[7 / 30 + 1];
       clearDirtyFlags();

       table_schema = TABLE_SCHEMA_DEFAULT;
       table_name = TABLE_NAME_DEFAULT;
       column_name = COLUMN_NAME_DEFAULT;
       ordinal_position = ORDINAL_POSITION_DEFAULT;
       nullable = NULLABLE_DEFAULT;
       data_type = DATA_TYPE_DEFAULT;
       data_length = DATA_LENGTH_DEFAULT;
    }

    /**
      * Copy constructor.
      */
    public TableColumnsMetadataDTOBase(TableColumnsMetadataDTOBase another)
    {

       table_schema = another.getTable_schema();
       table_name = another.getTable_name();
       column_name = another.getColumn_name();
       ordinal_position = another.getOrdinal_position();
       nullable = another.getNullable();
       data_type = another.getData_type();
       data_length = another.getData_length();

       dirtyFlagsArray = another.getCopyOfDirtyFlags();
    }

    public void clearDirtyFlags()
    {
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            dirtyFlagsArray[i] = 0;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public int[] getCopyOfDirtyFlags()
    {
       int[] copyOf = new int[dirtyFlagsArray.length];
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            copyOf[i] = dirtyFlagsArray[i];

       return copyOf;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public boolean isDirty()
    {
    	for(int i = 0; i < dirtyFlagsArray.length; i++)
    	if (dirtyFlagsArray[i] != 0)
    		return true;
    	
    	return false;
    }
    
    protected void markFieldAsDirty(int mainIndex, int bitwiseIndex, boolean aFlag)
    {
       if (aFlag)
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] | bitwiseIndex;
       else
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] & ~bitwiseIndex;
    }

    protected boolean checkFieldDirtiness(int mainIndex, int bitwiseIndex)
    {
       return (dirtyFlagsArray[mainIndex] & bitwiseIndex) != 0;
    }



    /**
      * DataBean Getter And Setter Accessor
      */

    // table_schema getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isTable_schemaDirty()  { return checkFieldDirtiness(TABLE_SCHEMA_DIRTYGROUP, TABLE_SCHEMA_DIRTYMASK); }

    public java.lang.String   getTable_schema()         { return table_schema; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "table_schema")
    public java.lang.String   getTable_schemaAsString() { return (table_schema == null) ? "" : table_schema; }

    // table_schema setter methods.
    
    protected void markTable_schemaAsDirty(boolean aFlag)  { markFieldAsDirty(TABLE_SCHEMA_DIRTYGROUP, TABLE_SCHEMA_DIRTYMASK, aFlag); }


    public void setTable_schema(String  p)
    {
       setTable_schema(p, DTOCasingStyle.none);
    }
    
    public void setTable_schema(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markTable_schemaAsDirty(!equalsObject(table_schema, p));
       table_schema = p;
    }

    // table_name getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isTable_nameDirty()  { return checkFieldDirtiness(TABLE_NAME_DIRTYGROUP, TABLE_NAME_DIRTYMASK); }

    public java.lang.String   getTable_name()         { return table_name; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "table_name")
    public java.lang.String   getTable_nameAsString() { return (table_name == null) ? "" : table_name; }

    // table_name setter methods.
    
    protected void markTable_nameAsDirty(boolean aFlag)  { markFieldAsDirty(TABLE_NAME_DIRTYGROUP, TABLE_NAME_DIRTYMASK, aFlag); }


    public void setTable_name(String  p)
    {
       setTable_name(p, DTOCasingStyle.none);
    }
    
    public void setTable_name(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markTable_nameAsDirty(!equalsObject(table_name, p));
       table_name = p;
    }

    // column_name getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isColumn_nameDirty()  { return checkFieldDirtiness(COLUMN_NAME_DIRTYGROUP, COLUMN_NAME_DIRTYMASK); }

    public java.lang.String   getColumn_name()         { return column_name; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "column_name")
    public java.lang.String   getColumn_nameAsString() { return (column_name == null) ? "" : column_name; }

    // column_name setter methods.
    
    protected void markColumn_nameAsDirty(boolean aFlag)  { markFieldAsDirty(COLUMN_NAME_DIRTYGROUP, COLUMN_NAME_DIRTYMASK, aFlag); }


    public void setColumn_name(String  p)
    {
       setColumn_name(p, DTOCasingStyle.none);
    }
    
    public void setColumn_name(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markColumn_nameAsDirty(!equalsObject(column_name, p));
       column_name = p;
    }

    // ordinal_position getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isOrdinal_positionDirty()  { return checkFieldDirtiness(ORDINAL_POSITION_DIRTYGROUP, ORDINAL_POSITION_DIRTYMASK); }

    public java.lang.Long   getOrdinal_position() { return ordinal_position; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "ordinal_position")
    public String getOrdinal_positionAsString() { return longAsString(ordinal_position); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public long   getOrdinal_positionAsLong()    { return ordinal_position != null ? ordinal_position.longValue() : 0L; }

    // ordinal_position setter methods.
    
    protected void markOrdinal_positionAsDirty(boolean aFlag)  { markFieldAsDirty(ORDINAL_POSITION_DIRTYGROUP, ORDINAL_POSITION_DIRTYMASK, aFlag); }


    public void setOrdinal_position(java.lang.Long  p)
    {
    	markOrdinal_positionAsDirty(!equalsObject(ordinal_position, p));
    	ordinal_position = p;
    }
    public void setOrdinal_positionAsLong(long p)
    {
    	setOrdinal_position(new java.lang.Long(p));
    }
    public void setOrdinal_position()
    {
    	setOrdinal_position(0L);
    }
    public void setOrdinal_positionAsString(String  p)
    {
    	setOrdinal_position(stringAsLong(p));
    }

    // nullable getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isNullableDirty()  { return checkFieldDirtiness(NULLABLE_DIRTYGROUP, NULLABLE_DIRTYMASK); }

    public java.lang.String   getNullable()         { return nullable; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "nullable")
    public java.lang.String   getNullableAsString() { return (nullable == null) ? "" : nullable; }

    // nullable setter methods.
    
    protected void markNullableAsDirty(boolean aFlag)  { markFieldAsDirty(NULLABLE_DIRTYGROUP, NULLABLE_DIRTYMASK, aFlag); }


    public void setNullable(String  p)
    {
       setNullable(p, DTOCasingStyle.none);
    }
    
    public void setNullable(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markNullableAsDirty(!equalsObject(nullable, p));
       nullable = p;
    }

    // data_type getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isData_typeDirty()  { return checkFieldDirtiness(DATA_TYPE_DIRTYGROUP, DATA_TYPE_DIRTYMASK); }

    public java.lang.String   getData_type()         { return data_type; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "data_type")
    public java.lang.String   getData_typeAsString() { return (data_type == null) ? "" : data_type; }

    // data_type setter methods.
    
    protected void markData_typeAsDirty(boolean aFlag)  { markFieldAsDirty(DATA_TYPE_DIRTYGROUP, DATA_TYPE_DIRTYMASK, aFlag); }


    public void setData_type(String  p)
    {
       setData_type(p, DTOCasingStyle.none);
    }
    
    public void setData_type(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markData_typeAsDirty(!equalsObject(data_type, p));
       data_type = p;
    }

    // data_length getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isData_lengthDirty()  { return checkFieldDirtiness(DATA_LENGTH_DIRTYGROUP, DATA_LENGTH_DIRTYMASK); }

    public java.lang.Long   getData_length() { return data_length; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "data_length")
    public String getData_lengthAsString() { return longAsString(data_length); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public long   getData_lengthAsLong()    { return data_length != null ? data_length.longValue() : 0L; }

    // data_length setter methods.
    
    protected void markData_lengthAsDirty(boolean aFlag)  { markFieldAsDirty(DATA_LENGTH_DIRTYGROUP, DATA_LENGTH_DIRTYMASK, aFlag); }


    public void setData_length(java.lang.Long  p)
    {
    	markData_lengthAsDirty(!equalsObject(data_length, p));
    	data_length = p;
    }
    public void setData_lengthAsLong(long p)
    {
    	setData_length(new java.lang.Long(p));
    }
    public void setData_length()
    {
    	setData_length(0L);
    }
    public void setData_lengthAsString(String  p)
    {
    	setData_length(stringAsLong(p));
    }

}
