//
// generated by jGAMe Software - GPA Gruppo Progetti Avanzati s.r.l. 2016-2017
//
//
// README Section
//


package org.r3.db.sailevent.appcrewmemberview;

import org.r3.db.utils.*;

@org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
@javax.xml.bind.annotation.XmlRootElement(name = "SailApplicationCrewMemberViewDTOBase")
public class SailApplicationCrewMemberViewDTOBase extends org.r3.db.DTOBase
{
    int[] dirtyFlagsArray;

    protected java.lang.String  crewmemberid;
    protected java.lang.String  eventid;
    protected java.lang.String  applicationid;
    protected java.lang.String  cardnumber;
    protected java.lang.String  crewmembername;
    protected java.lang.Float  weight;
    protected java.lang.String  crewmemberrolecode;
    protected java.lang.String  memberstatuscode;
    protected java.sql.Timestamp  createtimestamp;
    protected java.sql.Timestamp  deletetimestamp;
    protected java.lang.String  checkcardnumber;
    protected java.sql.Timestamp  checkcardnumber_ts;
    protected java.lang.String  recstatus;
    protected java.sql.Timestamp  rectimestamp;
    protected java.lang.String  cardnumberstatuscode;
    protected java.lang.String  yachtclub;
    protected java.lang.String  cardholdername;
    protected java.lang.String  cardholderlastname;
    protected java.sql.Timestamp  medexamexpirationdate;
    protected java.sql.Timestamp  cardexpirationdate;
    protected java.sql.Timestamp  renewaldate;
    protected java.sql.Timestamp  generalcardexpirationdate;
    protected java.sql.Timestamp  systemcheckdate;
    protected java.lang.String  sailnumber;
    protected java.lang.String  yachtname;
    protected java.lang.String  completionstatus;
    protected java.lang.String  verificationstatus;
    protected java.math.BigDecimal  numcoviddocs;

    public static final java.lang.String CREWMEMBERID_DEFAULT  =  null;
    public static final java.lang.String EVENTID_DEFAULT  =  null;
    public static final java.lang.String APPLICATIONID_DEFAULT  =  null;
    public static final java.lang.String CARDNUMBER_DEFAULT  =  null;
    public static final java.lang.String CREWMEMBERNAME_DEFAULT  =  null;
    public static final java.lang.Float WEIGHT_DEFAULT  =  null;
    public static final java.lang.String CREWMEMBERROLECODE_DEFAULT  =  null;
    public static final java.lang.String MEMBERSTATUSCODE_DEFAULT  =  null;
    public static final java.sql.Timestamp CREATETIMESTAMP_DEFAULT  =  null;
    public static final java.sql.Timestamp DELETETIMESTAMP_DEFAULT  =  null;
    public static final java.lang.String CHECKCARDNUMBER_DEFAULT  =  null;
    public static final java.sql.Timestamp CHECKCARDNUMBER_TS_DEFAULT  =  null;
    public static final java.lang.String RECSTATUS_DEFAULT  =  null;
    public static final java.sql.Timestamp RECTIMESTAMP_DEFAULT  =  null;
    public static final java.lang.String CARDNUMBERSTATUSCODE_DEFAULT  =  null;
    public static final java.lang.String YACHTCLUB_DEFAULT  =  null;
    public static final java.lang.String CARDHOLDERNAME_DEFAULT  =  null;
    public static final java.lang.String CARDHOLDERLASTNAME_DEFAULT  =  null;
    public static final java.sql.Timestamp MEDEXAMEXPIRATIONDATE_DEFAULT  =  null;
    public static final java.sql.Timestamp CARDEXPIRATIONDATE_DEFAULT  =  null;
    public static final java.sql.Timestamp RENEWALDATE_DEFAULT  =  null;
    public static final java.sql.Timestamp GENERALCARDEXPIRATIONDATE_DEFAULT  =  null;
    public static final java.sql.Timestamp SYSTEMCHECKDATE_DEFAULT  =  null;
    public static final java.lang.String SAILNUMBER_DEFAULT  =  null;
    public static final java.lang.String YACHTNAME_DEFAULT  =  null;
    public static final java.lang.String COMPLETIONSTATUS_DEFAULT  =  null;
    public static final java.lang.String VERIFICATIONSTATUS_DEFAULT  =  null;
    public static final java.math.BigDecimal NUMCOVIDDOCS_DEFAULT  =  null;

    public static final int CREWMEMBERID_DIRTYGROUP  =  0;
    public static final int CREWMEMBERID_DIRTYMASK   =  1;
    public static final int EVENTID_DIRTYGROUP  =  0;
    public static final int EVENTID_DIRTYMASK   =  2;
    public static final int APPLICATIONID_DIRTYGROUP  =  0;
    public static final int APPLICATIONID_DIRTYMASK   =  4;
    public static final int CARDNUMBER_DIRTYGROUP  =  0;
    public static final int CARDNUMBER_DIRTYMASK   =  8;
    public static final int CREWMEMBERNAME_DIRTYGROUP  =  0;
    public static final int CREWMEMBERNAME_DIRTYMASK   =  16;
    public static final int WEIGHT_DIRTYGROUP  =  0;
    public static final int WEIGHT_DIRTYMASK   =  32;
    public static final int CREWMEMBERROLECODE_DIRTYGROUP  =  0;
    public static final int CREWMEMBERROLECODE_DIRTYMASK   =  64;
    public static final int MEMBERSTATUSCODE_DIRTYGROUP  =  0;
    public static final int MEMBERSTATUSCODE_DIRTYMASK   =  128;
    public static final int CREATETIMESTAMP_DIRTYGROUP  =  0;
    public static final int CREATETIMESTAMP_DIRTYMASK   =  256;
    public static final int DELETETIMESTAMP_DIRTYGROUP  =  0;
    public static final int DELETETIMESTAMP_DIRTYMASK   =  512;
    public static final int CHECKCARDNUMBER_DIRTYGROUP  =  0;
    public static final int CHECKCARDNUMBER_DIRTYMASK   =  1024;
    public static final int CHECKCARDNUMBER_TS_DIRTYGROUP  =  0;
    public static final int CHECKCARDNUMBER_TS_DIRTYMASK   =  2048;
    public static final int RECSTATUS_DIRTYGROUP  =  0;
    public static final int RECSTATUS_DIRTYMASK   =  4096;
    public static final int RECTIMESTAMP_DIRTYGROUP  =  0;
    public static final int RECTIMESTAMP_DIRTYMASK   =  8192;
    public static final int CARDNUMBERSTATUSCODE_DIRTYGROUP  =  0;
    public static final int CARDNUMBERSTATUSCODE_DIRTYMASK   =  16384;
    public static final int YACHTCLUB_DIRTYGROUP  =  0;
    public static final int YACHTCLUB_DIRTYMASK   =  32768;
    public static final int CARDHOLDERNAME_DIRTYGROUP  =  0;
    public static final int CARDHOLDERNAME_DIRTYMASK   =  65536;
    public static final int CARDHOLDERLASTNAME_DIRTYGROUP  =  0;
    public static final int CARDHOLDERLASTNAME_DIRTYMASK   =  131072;
    public static final int MEDEXAMEXPIRATIONDATE_DIRTYGROUP  =  0;
    public static final int MEDEXAMEXPIRATIONDATE_DIRTYMASK   =  262144;
    public static final int CARDEXPIRATIONDATE_DIRTYGROUP  =  0;
    public static final int CARDEXPIRATIONDATE_DIRTYMASK   =  524288;
    public static final int RENEWALDATE_DIRTYGROUP  =  0;
    public static final int RENEWALDATE_DIRTYMASK   =  1048576;
    public static final int GENERALCARDEXPIRATIONDATE_DIRTYGROUP  =  0;
    public static final int GENERALCARDEXPIRATIONDATE_DIRTYMASK   =  2097152;
    public static final int SYSTEMCHECKDATE_DIRTYGROUP  =  0;
    public static final int SYSTEMCHECKDATE_DIRTYMASK   =  4194304;
    public static final int SAILNUMBER_DIRTYGROUP  =  0;
    public static final int SAILNUMBER_DIRTYMASK   =  8388608;
    public static final int YACHTNAME_DIRTYGROUP  =  0;
    public static final int YACHTNAME_DIRTYMASK   =  16777216;
    public static final int COMPLETIONSTATUS_DIRTYGROUP  =  0;
    public static final int COMPLETIONSTATUS_DIRTYMASK   =  33554432;
    public static final int VERIFICATIONSTATUS_DIRTYGROUP  =  0;
    public static final int VERIFICATIONSTATUS_DIRTYMASK   =  67108864;
    public static final int NUMCOVIDDOCS_DIRTYGROUP  =  0;
    public static final int NUMCOVIDDOCS_DIRTYMASK   =  134217728;


    /**
      * DataBean constructor.
      */
    public SailApplicationCrewMemberViewDTOBase()
    {
       dirtyFlagsArray = new int[28 / 30 + 1];
       clearDirtyFlags();

       crewmemberid = CREWMEMBERID_DEFAULT;
       eventid = EVENTID_DEFAULT;
       applicationid = APPLICATIONID_DEFAULT;
       cardnumber = CARDNUMBER_DEFAULT;
       crewmembername = CREWMEMBERNAME_DEFAULT;
       weight = WEIGHT_DEFAULT;
       crewmemberrolecode = CREWMEMBERROLECODE_DEFAULT;
       memberstatuscode = MEMBERSTATUSCODE_DEFAULT;
       createtimestamp = CREATETIMESTAMP_DEFAULT;
       deletetimestamp = DELETETIMESTAMP_DEFAULT;
       checkcardnumber = CHECKCARDNUMBER_DEFAULT;
       checkcardnumber_ts = CHECKCARDNUMBER_TS_DEFAULT;
       recstatus = RECSTATUS_DEFAULT;
       rectimestamp = RECTIMESTAMP_DEFAULT;
       cardnumberstatuscode = CARDNUMBERSTATUSCODE_DEFAULT;
       yachtclub = YACHTCLUB_DEFAULT;
       cardholdername = CARDHOLDERNAME_DEFAULT;
       cardholderlastname = CARDHOLDERLASTNAME_DEFAULT;
       medexamexpirationdate = MEDEXAMEXPIRATIONDATE_DEFAULT;
       cardexpirationdate = CARDEXPIRATIONDATE_DEFAULT;
       renewaldate = RENEWALDATE_DEFAULT;
       generalcardexpirationdate = GENERALCARDEXPIRATIONDATE_DEFAULT;
       systemcheckdate = SYSTEMCHECKDATE_DEFAULT;
       sailnumber = SAILNUMBER_DEFAULT;
       yachtname = YACHTNAME_DEFAULT;
       completionstatus = COMPLETIONSTATUS_DEFAULT;
       verificationstatus = VERIFICATIONSTATUS_DEFAULT;
       numcoviddocs = NUMCOVIDDOCS_DEFAULT;
    }

    /**
      * Copy constructor.
      */
    public SailApplicationCrewMemberViewDTOBase(SailApplicationCrewMemberViewDTOBase another)
    {

       crewmemberid = another.getCrewmemberid();
       eventid = another.getEventid();
       applicationid = another.getApplicationid();
       cardnumber = another.getCardnumber();
       crewmembername = another.getCrewmembername();
       weight = another.getWeight();
       crewmemberrolecode = another.getCrewmemberrolecode();
       memberstatuscode = another.getMemberstatuscode();
       createtimestamp = another.getCreatetimestamp();
       deletetimestamp = another.getDeletetimestamp();
       checkcardnumber = another.getCheckcardnumber();
       checkcardnumber_ts = another.getCheckcardnumber_ts();
       recstatus = another.getRecstatus();
       rectimestamp = another.getRectimestamp();
       cardnumberstatuscode = another.getCardnumberstatuscode();
       yachtclub = another.getYachtclub();
       cardholdername = another.getCardholdername();
       cardholderlastname = another.getCardholderlastname();
       medexamexpirationdate = another.getMedexamexpirationdate();
       cardexpirationdate = another.getCardexpirationdate();
       renewaldate = another.getRenewaldate();
       generalcardexpirationdate = another.getGeneralcardexpirationdate();
       systemcheckdate = another.getSystemcheckdate();
       sailnumber = another.getSailnumber();
       yachtname = another.getYachtname();
       completionstatus = another.getCompletionstatus();
       verificationstatus = another.getVerificationstatus();
       numcoviddocs = another.getNumcoviddocs();

       dirtyFlagsArray = another.getCopyOfDirtyFlags();
    }

    public void clearDirtyFlags()
    {
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            dirtyFlagsArray[i] = 0;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public int[] getCopyOfDirtyFlags()
    {
       int[] copyOf = new int[dirtyFlagsArray.length];
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            copyOf[i] = dirtyFlagsArray[i];

       return copyOf;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public boolean isDirty()
    {
    	for(int i = 0; i < dirtyFlagsArray.length; i++)
    	if (dirtyFlagsArray[i] != 0)
    		return true;
    	
    	return false;
    }
    
    protected void markFieldAsDirty(int mainIndex, int bitwiseIndex, boolean aFlag)
    {
       if (aFlag)
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] | bitwiseIndex;
       else
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] & ~bitwiseIndex;
    }

    protected boolean checkFieldDirtiness(int mainIndex, int bitwiseIndex)
    {
       return (dirtyFlagsArray[mainIndex] & bitwiseIndex) != 0;
    }

    public String getDtokey()
    {
        StringBuilder stb = new StringBuilder();
        stb.append(crewmemberid);
        return stb.toString();
    }

    public String getDtodescr()
    {
        boolean notNull = false;
        StringBuilder stb = new StringBuilder();
        if (crewmembername != null)
        {
        stb.append(crewmembername);
        notNull = true;        
        }
        if (notNull)
            return stb.toString();
            
        return null;
    }

    /**
      * DataBean Getter And Setter Accessor
      */

    // crewmemberid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCrewmemberidDirty()  { return checkFieldDirtiness(CREWMEMBERID_DIRTYGROUP, CREWMEMBERID_DIRTYMASK); }

    public java.lang.String   getCrewmemberid()         { return crewmemberid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "crewmemberid")
    public java.lang.String   getCrewmemberidAsString() { return (crewmemberid == null) ? "" : crewmemberid; }

    // crewmemberid setter methods.
    
    protected void markCrewmemberidAsDirty(boolean aFlag)  { markFieldAsDirty(CREWMEMBERID_DIRTYGROUP, CREWMEMBERID_DIRTYMASK, aFlag); }


    public void setCrewmemberid(String  p)
    {
       setCrewmemberid(p, DTOCasingStyle.none);
    }
    
    public void setCrewmemberid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCrewmemberidAsDirty(!equalsObject(crewmemberid, p));
       crewmemberid = p;
    }

    // eventid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isEventidDirty()  { return checkFieldDirtiness(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK); }

    public java.lang.String   getEventid()         { return eventid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "eventid")
    public java.lang.String   getEventidAsString() { return (eventid == null) ? "" : eventid; }

    // eventid setter methods.
    
    protected void markEventidAsDirty(boolean aFlag)  { markFieldAsDirty(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK, aFlag); }


    public void setEventid(String  p)
    {
       setEventid(p, DTOCasingStyle.none);
    }
    
    public void setEventid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markEventidAsDirty(!equalsObject(eventid, p));
       eventid = p;
    }

    // applicationid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isApplicationidDirty()  { return checkFieldDirtiness(APPLICATIONID_DIRTYGROUP, APPLICATIONID_DIRTYMASK); }

    public java.lang.String   getApplicationid()         { return applicationid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "applicationid")
    public java.lang.String   getApplicationidAsString() { return (applicationid == null) ? "" : applicationid; }

    // applicationid setter methods.
    
    protected void markApplicationidAsDirty(boolean aFlag)  { markFieldAsDirty(APPLICATIONID_DIRTYGROUP, APPLICATIONID_DIRTYMASK, aFlag); }


    public void setApplicationid(String  p)
    {
       setApplicationid(p, DTOCasingStyle.none);
    }
    
    public void setApplicationid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markApplicationidAsDirty(!equalsObject(applicationid, p));
       applicationid = p;
    }

    // cardnumber getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCardnumberDirty()  { return checkFieldDirtiness(CARDNUMBER_DIRTYGROUP, CARDNUMBER_DIRTYMASK); }

    public java.lang.String   getCardnumber()         { return cardnumber; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "cardnumber")
    public java.lang.String   getCardnumberAsString() { return (cardnumber == null) ? "" : cardnumber; }

    // cardnumber setter methods.
    
    protected void markCardnumberAsDirty(boolean aFlag)  { markFieldAsDirty(CARDNUMBER_DIRTYGROUP, CARDNUMBER_DIRTYMASK, aFlag); }


    public void setCardnumber(String  p)
    {
       setCardnumber(p, DTOCasingStyle.none);
    }
    
    public void setCardnumber(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCardnumberAsDirty(!equalsObject(cardnumber, p));
       cardnumber = p;
    }

    // crewmembername getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCrewmembernameDirty()  { return checkFieldDirtiness(CREWMEMBERNAME_DIRTYGROUP, CREWMEMBERNAME_DIRTYMASK); }

    public java.lang.String   getCrewmembername()         { return crewmembername; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "crewmembername")
    public java.lang.String   getCrewmembernameAsString() { return (crewmembername == null) ? "" : crewmembername; }

    // crewmembername setter methods.
    
    protected void markCrewmembernameAsDirty(boolean aFlag)  { markFieldAsDirty(CREWMEMBERNAME_DIRTYGROUP, CREWMEMBERNAME_DIRTYMASK, aFlag); }


    public void setCrewmembername(String  p)
    {
       setCrewmembername(p, DTOCasingStyle.none);
    }
    
    public void setCrewmembername(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCrewmembernameAsDirty(!equalsObject(crewmembername, p));
       crewmembername = p;
    }

    // weight getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isWeightDirty()  { return checkFieldDirtiness(WEIGHT_DIRTYGROUP, WEIGHT_DIRTYMASK); }

    public java.lang.Float   getWeight() { return weight; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "weight")
    public String getWeightAsString() { return floatAsString(weight); }

    // weight setter methods.
    
    protected void markWeightAsDirty(boolean aFlag)  { markFieldAsDirty(WEIGHT_DIRTYGROUP, WEIGHT_DIRTYMASK, aFlag); }


    public void setWeight(java.lang.Float  p)
    {
    	markWeightAsDirty(!equalsObject(weight, p));
    	weight = p;
    }
    public void setWeight()
    {
    	setWeight((java.lang.Float)null);
    }
    public void setWeightAsString(String  p)
    {
    	setWeight(stringAsFloat(p));
    }

    // crewmemberrolecode getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCrewmemberrolecodeDirty()  { return checkFieldDirtiness(CREWMEMBERROLECODE_DIRTYGROUP, CREWMEMBERROLECODE_DIRTYMASK); }

    public java.lang.String   getCrewmemberrolecode()         { return crewmemberrolecode; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "crewmemberrolecode")
    public java.lang.String   getCrewmemberrolecodeAsString() { return (crewmemberrolecode == null) ? "" : crewmemberrolecode; }

    // crewmemberrolecode setter methods.
    
    protected void markCrewmemberrolecodeAsDirty(boolean aFlag)  { markFieldAsDirty(CREWMEMBERROLECODE_DIRTYGROUP, CREWMEMBERROLECODE_DIRTYMASK, aFlag); }


    public void setCrewmemberrolecode(String  p)
    {
       setCrewmemberrolecode(p, DTOCasingStyle.none);
    }
    
    public void setCrewmemberrolecode(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCrewmemberrolecodeAsDirty(!equalsObject(crewmemberrolecode, p));
       crewmemberrolecode = p;
    }

    // memberstatuscode getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isMemberstatuscodeDirty()  { return checkFieldDirtiness(MEMBERSTATUSCODE_DIRTYGROUP, MEMBERSTATUSCODE_DIRTYMASK); }

    public java.lang.String   getMemberstatuscode()         { return memberstatuscode; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "memberstatuscode")
    public java.lang.String   getMemberstatuscodeAsString() { return (memberstatuscode == null) ? "" : memberstatuscode; }

    // memberstatuscode setter methods.
    
    protected void markMemberstatuscodeAsDirty(boolean aFlag)  { markFieldAsDirty(MEMBERSTATUSCODE_DIRTYGROUP, MEMBERSTATUSCODE_DIRTYMASK, aFlag); }


    public void setMemberstatuscode(String  p)
    {
       setMemberstatuscode(p, DTOCasingStyle.none);
    }
    
    public void setMemberstatuscode(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markMemberstatuscodeAsDirty(!equalsObject(memberstatuscode, p));
       memberstatuscode = p;
    }

    // createtimestamp getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCreatetimestampDirty()  { return checkFieldDirtiness(CREATETIMESTAMP_DIRTYGROUP, CREATETIMESTAMP_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getCreatetimestamp() { return createtimestamp; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "createtimestamp")
    public String getCreatetimestampAsString() { return timestampAsString(createtimestamp, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getCreatetimestampAsString(java.text.DateFormat aDateFormat) { return timestampAsString(createtimestamp, aDateFormat); }

    // createtimestamp setter methods.
    
    protected void markCreatetimestampAsDirty(boolean aFlag)  { markFieldAsDirty(CREATETIMESTAMP_DIRTYGROUP, CREATETIMESTAMP_DIRTYMASK, aFlag); }


    public void setCreatetimestamp(java.sql.Timestamp  p)
    {
        markCreatetimestampAsDirty(!equalsObject(createtimestamp, p));
    	createtimestamp = p;
    }
    public void setCreatetimestamp(String  p, java.text.DateFormat aDateFormat)
    {
    	setCreatetimestamp(stringAsTimestamp(p, aDateFormat));
    }

    // deletetimestamp getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isDeletetimestampDirty()  { return checkFieldDirtiness(DELETETIMESTAMP_DIRTYGROUP, DELETETIMESTAMP_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getDeletetimestamp() { return deletetimestamp; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "deletetimestamp")
    public String getDeletetimestampAsString() { return timestampAsString(deletetimestamp, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getDeletetimestampAsString(java.text.DateFormat aDateFormat) { return timestampAsString(deletetimestamp, aDateFormat); }

    // deletetimestamp setter methods.
    
    protected void markDeletetimestampAsDirty(boolean aFlag)  { markFieldAsDirty(DELETETIMESTAMP_DIRTYGROUP, DELETETIMESTAMP_DIRTYMASK, aFlag); }


    public void setDeletetimestamp(java.sql.Timestamp  p)
    {
        markDeletetimestampAsDirty(!equalsObject(deletetimestamp, p));
    	deletetimestamp = p;
    }
    public void setDeletetimestamp(String  p, java.text.DateFormat aDateFormat)
    {
    	setDeletetimestamp(stringAsTimestamp(p, aDateFormat));
    }

    // checkcardnumber getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCheckcardnumberDirty()  { return checkFieldDirtiness(CHECKCARDNUMBER_DIRTYGROUP, CHECKCARDNUMBER_DIRTYMASK); }

    public java.lang.String   getCheckcardnumber()         { return checkcardnumber; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "checkcardnumber")
    public java.lang.String   getCheckcardnumberAsString() { return (checkcardnumber == null) ? "" : checkcardnumber; }

    // checkcardnumber setter methods.
    
    protected void markCheckcardnumberAsDirty(boolean aFlag)  { markFieldAsDirty(CHECKCARDNUMBER_DIRTYGROUP, CHECKCARDNUMBER_DIRTYMASK, aFlag); }


    public void setCheckcardnumber(String  p)
    {
       setCheckcardnumber(p, DTOCasingStyle.none);
    }
    
    public void setCheckcardnumber(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCheckcardnumberAsDirty(!equalsObject(checkcardnumber, p));
       checkcardnumber = p;
    }

    // checkcardnumber_ts getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCheckcardnumber_tsDirty()  { return checkFieldDirtiness(CHECKCARDNUMBER_TS_DIRTYGROUP, CHECKCARDNUMBER_TS_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getCheckcardnumber_ts() { return checkcardnumber_ts; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "checkcardnumber_ts")
    public String getCheckcardnumber_tsAsString() { return timestampAsString(checkcardnumber_ts, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getCheckcardnumber_tsAsString(java.text.DateFormat aDateFormat) { return timestampAsString(checkcardnumber_ts, aDateFormat); }

    // checkcardnumber_ts setter methods.
    
    protected void markCheckcardnumber_tsAsDirty(boolean aFlag)  { markFieldAsDirty(CHECKCARDNUMBER_TS_DIRTYGROUP, CHECKCARDNUMBER_TS_DIRTYMASK, aFlag); }


    public void setCheckcardnumber_ts(java.sql.Timestamp  p)
    {
        markCheckcardnumber_tsAsDirty(!equalsObject(checkcardnumber_ts, p));
    	checkcardnumber_ts = p;
    }
    public void setCheckcardnumber_ts(String  p, java.text.DateFormat aDateFormat)
    {
    	setCheckcardnumber_ts(stringAsTimestamp(p, aDateFormat));
    }

    // recstatus getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRecstatusDirty()  { return checkFieldDirtiness(RECSTATUS_DIRTYGROUP, RECSTATUS_DIRTYMASK); }

    public java.lang.String   getRecstatus()         { return recstatus; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "recstatus")
    public java.lang.String   getRecstatusAsString() { return (recstatus == null) ? "" : recstatus; }

    // recstatus setter methods.
    
    protected void markRecstatusAsDirty(boolean aFlag)  { markFieldAsDirty(RECSTATUS_DIRTYGROUP, RECSTATUS_DIRTYMASK, aFlag); }


    public void setRecstatus(String  p)
    {
       setRecstatus(p, DTOCasingStyle.none);
    }
    
    public void setRecstatus(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markRecstatusAsDirty(!equalsObject(recstatus, p));
       recstatus = p;
    }

    // rectimestamp getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRectimestampDirty()  { return checkFieldDirtiness(RECTIMESTAMP_DIRTYGROUP, RECTIMESTAMP_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getRectimestamp() { return rectimestamp; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "rectimestamp")
    public String getRectimestampAsString() { return timestampAsString(rectimestamp, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getRectimestampAsString(java.text.DateFormat aDateFormat) { return timestampAsString(rectimestamp, aDateFormat); }

    // rectimestamp setter methods.
    
    protected void markRectimestampAsDirty(boolean aFlag)  { markFieldAsDirty(RECTIMESTAMP_DIRTYGROUP, RECTIMESTAMP_DIRTYMASK, aFlag); }


    public void setRectimestamp(java.sql.Timestamp  p)
    {
        markRectimestampAsDirty(!equalsObject(rectimestamp, p));
    	rectimestamp = p;
    }
    public void setRectimestamp(String  p, java.text.DateFormat aDateFormat)
    {
    	setRectimestamp(stringAsTimestamp(p, aDateFormat));
    }

    // cardnumberstatuscode getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCardnumberstatuscodeDirty()  { return checkFieldDirtiness(CARDNUMBERSTATUSCODE_DIRTYGROUP, CARDNUMBERSTATUSCODE_DIRTYMASK); }

    public java.lang.String   getCardnumberstatuscode()         { return cardnumberstatuscode; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "cardnumberstatuscode")
    public java.lang.String   getCardnumberstatuscodeAsString() { return (cardnumberstatuscode == null) ? "" : cardnumberstatuscode; }

    // cardnumberstatuscode setter methods.
    
    protected void markCardnumberstatuscodeAsDirty(boolean aFlag)  { markFieldAsDirty(CARDNUMBERSTATUSCODE_DIRTYGROUP, CARDNUMBERSTATUSCODE_DIRTYMASK, aFlag); }


    public void setCardnumberstatuscode(String  p)
    {
       setCardnumberstatuscode(p, DTOCasingStyle.none);
    }
    
    public void setCardnumberstatuscode(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCardnumberstatuscodeAsDirty(!equalsObject(cardnumberstatuscode, p));
       cardnumberstatuscode = p;
    }

    // yachtclub getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isYachtclubDirty()  { return checkFieldDirtiness(YACHTCLUB_DIRTYGROUP, YACHTCLUB_DIRTYMASK); }

    public java.lang.String   getYachtclub()         { return yachtclub; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "yachtclub")
    public java.lang.String   getYachtclubAsString() { return (yachtclub == null) ? "" : yachtclub; }

    // yachtclub setter methods.
    
    protected void markYachtclubAsDirty(boolean aFlag)  { markFieldAsDirty(YACHTCLUB_DIRTYGROUP, YACHTCLUB_DIRTYMASK, aFlag); }


    public void setYachtclub(String  p)
    {
       setYachtclub(p, DTOCasingStyle.none);
    }
    
    public void setYachtclub(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markYachtclubAsDirty(!equalsObject(yachtclub, p));
       yachtclub = p;
    }

    // cardholdername getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCardholdernameDirty()  { return checkFieldDirtiness(CARDHOLDERNAME_DIRTYGROUP, CARDHOLDERNAME_DIRTYMASK); }

    public java.lang.String   getCardholdername()         { return cardholdername; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "cardholdername")
    public java.lang.String   getCardholdernameAsString() { return (cardholdername == null) ? "" : cardholdername; }

    // cardholdername setter methods.
    
    protected void markCardholdernameAsDirty(boolean aFlag)  { markFieldAsDirty(CARDHOLDERNAME_DIRTYGROUP, CARDHOLDERNAME_DIRTYMASK, aFlag); }


    public void setCardholdername(String  p)
    {
       setCardholdername(p, DTOCasingStyle.none);
    }
    
    public void setCardholdername(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCardholdernameAsDirty(!equalsObject(cardholdername, p));
       cardholdername = p;
    }

    // cardholderlastname getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCardholderlastnameDirty()  { return checkFieldDirtiness(CARDHOLDERLASTNAME_DIRTYGROUP, CARDHOLDERLASTNAME_DIRTYMASK); }

    public java.lang.String   getCardholderlastname()         { return cardholderlastname; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "cardholderlastname")
    public java.lang.String   getCardholderlastnameAsString() { return (cardholderlastname == null) ? "" : cardholderlastname; }

    // cardholderlastname setter methods.
    
    protected void markCardholderlastnameAsDirty(boolean aFlag)  { markFieldAsDirty(CARDHOLDERLASTNAME_DIRTYGROUP, CARDHOLDERLASTNAME_DIRTYMASK, aFlag); }


    public void setCardholderlastname(String  p)
    {
       setCardholderlastname(p, DTOCasingStyle.none);
    }
    
    public void setCardholderlastname(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCardholderlastnameAsDirty(!equalsObject(cardholderlastname, p));
       cardholderlastname = p;
    }

    // medexamexpirationdate getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isMedexamexpirationdateDirty()  { return checkFieldDirtiness(MEDEXAMEXPIRATIONDATE_DIRTYGROUP, MEDEXAMEXPIRATIONDATE_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getMedexamexpirationdate() { return medexamexpirationdate; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "medexamexpirationdate")
    public String getMedexamexpirationdateAsString() { return timestampAsString(medexamexpirationdate, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getMedexamexpirationdateAsString(java.text.DateFormat aDateFormat) { return timestampAsString(medexamexpirationdate, aDateFormat); }

    // medexamexpirationdate setter methods.
    
    protected void markMedexamexpirationdateAsDirty(boolean aFlag)  { markFieldAsDirty(MEDEXAMEXPIRATIONDATE_DIRTYGROUP, MEDEXAMEXPIRATIONDATE_DIRTYMASK, aFlag); }


    public void setMedexamexpirationdate(java.sql.Timestamp  p)
    {
        markMedexamexpirationdateAsDirty(!equalsObject(medexamexpirationdate, p));
    	medexamexpirationdate = p;
    }
    public void setMedexamexpirationdate(String  p, java.text.DateFormat aDateFormat)
    {
    	setMedexamexpirationdate(stringAsTimestamp(p, aDateFormat));
    }

    // cardexpirationdate getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCardexpirationdateDirty()  { return checkFieldDirtiness(CARDEXPIRATIONDATE_DIRTYGROUP, CARDEXPIRATIONDATE_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getCardexpirationdate() { return cardexpirationdate; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "cardexpirationdate")
    public String getCardexpirationdateAsString() { return timestampAsString(cardexpirationdate, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getCardexpirationdateAsString(java.text.DateFormat aDateFormat) { return timestampAsString(cardexpirationdate, aDateFormat); }

    // cardexpirationdate setter methods.
    
    protected void markCardexpirationdateAsDirty(boolean aFlag)  { markFieldAsDirty(CARDEXPIRATIONDATE_DIRTYGROUP, CARDEXPIRATIONDATE_DIRTYMASK, aFlag); }


    public void setCardexpirationdate(java.sql.Timestamp  p)
    {
        markCardexpirationdateAsDirty(!equalsObject(cardexpirationdate, p));
    	cardexpirationdate = p;
    }
    public void setCardexpirationdate(String  p, java.text.DateFormat aDateFormat)
    {
    	setCardexpirationdate(stringAsTimestamp(p, aDateFormat));
    }

    // renewaldate getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isRenewaldateDirty()  { return checkFieldDirtiness(RENEWALDATE_DIRTYGROUP, RENEWALDATE_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getRenewaldate() { return renewaldate; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "renewaldate")
    public String getRenewaldateAsString() { return timestampAsString(renewaldate, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getRenewaldateAsString(java.text.DateFormat aDateFormat) { return timestampAsString(renewaldate, aDateFormat); }

    // renewaldate setter methods.
    
    protected void markRenewaldateAsDirty(boolean aFlag)  { markFieldAsDirty(RENEWALDATE_DIRTYGROUP, RENEWALDATE_DIRTYMASK, aFlag); }


    public void setRenewaldate(java.sql.Timestamp  p)
    {
        markRenewaldateAsDirty(!equalsObject(renewaldate, p));
    	renewaldate = p;
    }
    public void setRenewaldate(String  p, java.text.DateFormat aDateFormat)
    {
    	setRenewaldate(stringAsTimestamp(p, aDateFormat));
    }

    // generalcardexpirationdate getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isGeneralcardexpirationdateDirty()  { return checkFieldDirtiness(GENERALCARDEXPIRATIONDATE_DIRTYGROUP, GENERALCARDEXPIRATIONDATE_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getGeneralcardexpirationdate() { return generalcardexpirationdate; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "generalcardexpirationdate")
    public String getGeneralcardexpirationdateAsString() { return timestampAsString(generalcardexpirationdate, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getGeneralcardexpirationdateAsString(java.text.DateFormat aDateFormat) { return timestampAsString(generalcardexpirationdate, aDateFormat); }

    // generalcardexpirationdate setter methods.
    
    protected void markGeneralcardexpirationdateAsDirty(boolean aFlag)  { markFieldAsDirty(GENERALCARDEXPIRATIONDATE_DIRTYGROUP, GENERALCARDEXPIRATIONDATE_DIRTYMASK, aFlag); }


    public void setGeneralcardexpirationdate(java.sql.Timestamp  p)
    {
        markGeneralcardexpirationdateAsDirty(!equalsObject(generalcardexpirationdate, p));
    	generalcardexpirationdate = p;
    }
    public void setGeneralcardexpirationdate(String  p, java.text.DateFormat aDateFormat)
    {
    	setGeneralcardexpirationdate(stringAsTimestamp(p, aDateFormat));
    }

    // systemcheckdate getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isSystemcheckdateDirty()  { return checkFieldDirtiness(SYSTEMCHECKDATE_DIRTYGROUP, SYSTEMCHECKDATE_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getSystemcheckdate() { return systemcheckdate; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "systemcheckdate")
    public String getSystemcheckdateAsString() { return timestampAsString(systemcheckdate, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getSystemcheckdateAsString(java.text.DateFormat aDateFormat) { return timestampAsString(systemcheckdate, aDateFormat); }

    // systemcheckdate setter methods.
    
    protected void markSystemcheckdateAsDirty(boolean aFlag)  { markFieldAsDirty(SYSTEMCHECKDATE_DIRTYGROUP, SYSTEMCHECKDATE_DIRTYMASK, aFlag); }


    public void setSystemcheckdate(java.sql.Timestamp  p)
    {
        markSystemcheckdateAsDirty(!equalsObject(systemcheckdate, p));
    	systemcheckdate = p;
    }
    public void setSystemcheckdate(String  p, java.text.DateFormat aDateFormat)
    {
    	setSystemcheckdate(stringAsTimestamp(p, aDateFormat));
    }

    // sailnumber getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isSailnumberDirty()  { return checkFieldDirtiness(SAILNUMBER_DIRTYGROUP, SAILNUMBER_DIRTYMASK); }

    public java.lang.String   getSailnumber()         { return sailnumber; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "sailnumber")
    public java.lang.String   getSailnumberAsString() { return (sailnumber == null) ? "" : sailnumber; }

    // sailnumber setter methods.
    
    protected void markSailnumberAsDirty(boolean aFlag)  { markFieldAsDirty(SAILNUMBER_DIRTYGROUP, SAILNUMBER_DIRTYMASK, aFlag); }


    public void setSailnumber(String  p)
    {
       setSailnumber(p, DTOCasingStyle.none);
    }
    
    public void setSailnumber(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markSailnumberAsDirty(!equalsObject(sailnumber, p));
       sailnumber = p;
    }

    // yachtname getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isYachtnameDirty()  { return checkFieldDirtiness(YACHTNAME_DIRTYGROUP, YACHTNAME_DIRTYMASK); }

    public java.lang.String   getYachtname()         { return yachtname; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "yachtname")
    public java.lang.String   getYachtnameAsString() { return (yachtname == null) ? "" : yachtname; }

    // yachtname setter methods.
    
    protected void markYachtnameAsDirty(boolean aFlag)  { markFieldAsDirty(YACHTNAME_DIRTYGROUP, YACHTNAME_DIRTYMASK, aFlag); }


    public void setYachtname(String  p)
    {
       setYachtname(p, DTOCasingStyle.none);
    }
    
    public void setYachtname(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markYachtnameAsDirty(!equalsObject(yachtname, p));
       yachtname = p;
    }

    // completionstatus getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCompletionstatusDirty()  { return checkFieldDirtiness(COMPLETIONSTATUS_DIRTYGROUP, COMPLETIONSTATUS_DIRTYMASK); }

    public java.lang.String   getCompletionstatus()         { return completionstatus; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "completionstatus")
    public java.lang.String   getCompletionstatusAsString() { return (completionstatus == null) ? "" : completionstatus; }

    // completionstatus setter methods.
    
    protected void markCompletionstatusAsDirty(boolean aFlag)  { markFieldAsDirty(COMPLETIONSTATUS_DIRTYGROUP, COMPLETIONSTATUS_DIRTYMASK, aFlag); }


    public void setCompletionstatus(String  p)
    {
       setCompletionstatus(p, DTOCasingStyle.none);
    }
    
    public void setCompletionstatus(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCompletionstatusAsDirty(!equalsObject(completionstatus, p));
       completionstatus = p;
    }

    // verificationstatus getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isVerificationstatusDirty()  { return checkFieldDirtiness(VERIFICATIONSTATUS_DIRTYGROUP, VERIFICATIONSTATUS_DIRTYMASK); }

    public java.lang.String   getVerificationstatus()         { return verificationstatus; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "verificationstatus")
    public java.lang.String   getVerificationstatusAsString() { return (verificationstatus == null) ? "" : verificationstatus; }

    // verificationstatus setter methods.
    
    protected void markVerificationstatusAsDirty(boolean aFlag)  { markFieldAsDirty(VERIFICATIONSTATUS_DIRTYGROUP, VERIFICATIONSTATUS_DIRTYMASK, aFlag); }


    public void setVerificationstatus(String  p)
    {
       setVerificationstatus(p, DTOCasingStyle.none);
    }
    
    public void setVerificationstatus(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markVerificationstatusAsDirty(!equalsObject(verificationstatus, p));
       verificationstatus = p;
    }

    // numcoviddocs getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isNumcoviddocsDirty()  { return checkFieldDirtiness(NUMCOVIDDOCS_DIRTYGROUP, NUMCOVIDDOCS_DIRTYMASK); }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public double getNumcoviddocsAsDouble()   {
        return (numcoviddocs != null) ? numcoviddocs.doubleValue() : 0;
    }

    public java.math.BigDecimal getNumcoviddocs() { return numcoviddocs; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String               getNumcoviddocsAsString(java.text.NumberFormat    aNumberFormat)    { return currencyAsString(numcoviddocs, aNumberFormat); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String               getNumcoviddocsAsString()            { return decimalAsString(numcoviddocs);  }

    // numcoviddocs setter methods.
    
    protected void markNumcoviddocsAsDirty(boolean aFlag)  { markFieldAsDirty(NUMCOVIDDOCS_DIRTYGROUP, NUMCOVIDDOCS_DIRTYMASK, aFlag); }


    public void setNumcoviddocs(java.math.BigDecimal  p) {
           p = (p != null) ? p.setScale(0, java.math.BigDecimal.ROUND_HALF_DOWN) : null;
           markNumcoviddocsAsDirty(!equalsBigDecimal(numcoviddocs, p));
           numcoviddocs = p;
    }
    public void setNumcoviddocsAsDouble(double  p) {
       	   setNumcoviddocs(new java.math.BigDecimal(p).setScale(0, java.math.BigDecimal.ROUND_HALF_DOWN));
    }
    public void setNumcoviddocsAsString(String  p) {
           setNumcoviddocs(stringAsBigDecimal(p, 0));
    }

}
