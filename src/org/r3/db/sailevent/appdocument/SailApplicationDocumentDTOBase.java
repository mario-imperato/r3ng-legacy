//
// generated by jGAMe Software - GPA Gruppo Progetti Avanzati s.r.l. 2016-2017
//
//
// README Section
//


package org.r3.db.sailevent.appdocument;

import org.r3.db.utils.*;

@org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
@javax.xml.bind.annotation.XmlRootElement(name = "SailApplicationDocumentDTOBase")
public class SailApplicationDocumentDTOBase extends org.r3.db.DTOBase
{
    int[] dirtyFlagsArray;

    protected java.lang.String  documentid;
    protected java.lang.String  eventid;
    protected java.lang.String  applicationid;
    protected java.lang.String  documenttypecode;
    protected java.lang.String  documentname;
    protected java.lang.String  documenturl;
    protected java.lang.Long  filesize;
    protected java.lang.String  contenttype;
    protected java.lang.String  annotation;
    protected java.lang.String  imageurl;
    protected java.lang.Integer  imageheight;
    protected java.lang.Integer  imagewidth;
    protected java.lang.String  iconurl;
    protected java.lang.Integer  iconwidth;
    protected java.lang.Integer  iconheight;
    protected java.sql.Timestamp  uploadtimestamp;
    protected java.lang.String  crewmemberid;

    public static final java.lang.String DOCUMENTID_DEFAULT  =  null;
    public static final java.lang.String EVENTID_DEFAULT  =  null;
    public static final java.lang.String APPLICATIONID_DEFAULT  =  null;
    public static final java.lang.String DOCUMENTTYPECODE_DEFAULT  =  null;
    public static final java.lang.String DOCUMENTNAME_DEFAULT  =  null;
    public static final java.lang.String DOCUMENTURL_DEFAULT  =  null;
    public static final java.lang.Long FILESIZE_DEFAULT  =  null;
    public static final java.lang.String CONTENTTYPE_DEFAULT  =  null;
    public static final java.lang.String ANNOTATION_DEFAULT  =  null;
    public static final java.lang.String IMAGEURL_DEFAULT  =  null;
    public static final java.lang.Integer IMAGEHEIGHT_DEFAULT  =  null;
    public static final java.lang.Integer IMAGEWIDTH_DEFAULT  =  null;
    public static final java.lang.String ICONURL_DEFAULT  =  null;
    public static final java.lang.Integer ICONWIDTH_DEFAULT  =  null;
    public static final java.lang.Integer ICONHEIGHT_DEFAULT  =  null;
    public static final java.sql.Timestamp UPLOADTIMESTAMP_DEFAULT  =  null;
    public static final java.lang.String CREWMEMBERID_DEFAULT  =  null;

    public static final int DOCUMENTID_DIRTYGROUP  =  0;
    public static final int DOCUMENTID_DIRTYMASK   =  1;
    public static final int EVENTID_DIRTYGROUP  =  0;
    public static final int EVENTID_DIRTYMASK   =  2;
    public static final int APPLICATIONID_DIRTYGROUP  =  0;
    public static final int APPLICATIONID_DIRTYMASK   =  4;
    public static final int DOCUMENTTYPECODE_DIRTYGROUP  =  0;
    public static final int DOCUMENTTYPECODE_DIRTYMASK   =  8;
    public static final int DOCUMENTNAME_DIRTYGROUP  =  0;
    public static final int DOCUMENTNAME_DIRTYMASK   =  16;
    public static final int DOCUMENTURL_DIRTYGROUP  =  0;
    public static final int DOCUMENTURL_DIRTYMASK   =  32;
    public static final int FILESIZE_DIRTYGROUP  =  0;
    public static final int FILESIZE_DIRTYMASK   =  64;
    public static final int CONTENTTYPE_DIRTYGROUP  =  0;
    public static final int CONTENTTYPE_DIRTYMASK   =  128;
    public static final int ANNOTATION_DIRTYGROUP  =  0;
    public static final int ANNOTATION_DIRTYMASK   =  256;
    public static final int IMAGEURL_DIRTYGROUP  =  0;
    public static final int IMAGEURL_DIRTYMASK   =  512;
    public static final int IMAGEHEIGHT_DIRTYGROUP  =  0;
    public static final int IMAGEHEIGHT_DIRTYMASK   =  1024;
    public static final int IMAGEWIDTH_DIRTYGROUP  =  0;
    public static final int IMAGEWIDTH_DIRTYMASK   =  2048;
    public static final int ICONURL_DIRTYGROUP  =  0;
    public static final int ICONURL_DIRTYMASK   =  4096;
    public static final int ICONWIDTH_DIRTYGROUP  =  0;
    public static final int ICONWIDTH_DIRTYMASK   =  8192;
    public static final int ICONHEIGHT_DIRTYGROUP  =  0;
    public static final int ICONHEIGHT_DIRTYMASK   =  16384;
    public static final int UPLOADTIMESTAMP_DIRTYGROUP  =  0;
    public static final int UPLOADTIMESTAMP_DIRTYMASK   =  32768;
    public static final int CREWMEMBERID_DIRTYGROUP  =  0;
    public static final int CREWMEMBERID_DIRTYMASK   =  65536;


    /**
      * DataBean constructor.
      */
    public SailApplicationDocumentDTOBase()
    {
       dirtyFlagsArray = new int[17 / 30 + 1];
       clearDirtyFlags();

       documentid = DOCUMENTID_DEFAULT;
       eventid = EVENTID_DEFAULT;
       applicationid = APPLICATIONID_DEFAULT;
       documenttypecode = DOCUMENTTYPECODE_DEFAULT;
       documentname = DOCUMENTNAME_DEFAULT;
       documenturl = DOCUMENTURL_DEFAULT;
       filesize = FILESIZE_DEFAULT;
       contenttype = CONTENTTYPE_DEFAULT;
       annotation = ANNOTATION_DEFAULT;
       imageurl = IMAGEURL_DEFAULT;
       imageheight = IMAGEHEIGHT_DEFAULT;
       imagewidth = IMAGEWIDTH_DEFAULT;
       iconurl = ICONURL_DEFAULT;
       iconwidth = ICONWIDTH_DEFAULT;
       iconheight = ICONHEIGHT_DEFAULT;
       uploadtimestamp = UPLOADTIMESTAMP_DEFAULT;
       crewmemberid = CREWMEMBERID_DEFAULT;
    }

    /**
      * Copy constructor.
      */
    public SailApplicationDocumentDTOBase(SailApplicationDocumentDTOBase another)
    {

       documentid = another.getDocumentid();
       eventid = another.getEventid();
       applicationid = another.getApplicationid();
       documenttypecode = another.getDocumenttypecode();
       documentname = another.getDocumentname();
       documenturl = another.getDocumenturl();
       filesize = another.getFilesize();
       contenttype = another.getContenttype();
       annotation = another.getAnnotation();
       imageurl = another.getImageurl();
       imageheight = another.getImageheight();
       imagewidth = another.getImagewidth();
       iconurl = another.getIconurl();
       iconwidth = another.getIconwidth();
       iconheight = another.getIconheight();
       uploadtimestamp = another.getUploadtimestamp();
       crewmemberid = another.getCrewmemberid();

       dirtyFlagsArray = another.getCopyOfDirtyFlags();
    }

    public void clearDirtyFlags()
    {
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            dirtyFlagsArray[i] = 0;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public int[] getCopyOfDirtyFlags()
    {
       int[] copyOf = new int[dirtyFlagsArray.length];
       for(int i = 0; i < dirtyFlagsArray.length; i++)
            copyOf[i] = dirtyFlagsArray[i];

       return copyOf;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient
    public boolean isDirty()
    {
    	for(int i = 0; i < dirtyFlagsArray.length; i++)
    	if (dirtyFlagsArray[i] != 0)
    		return true;
    	
    	return false;
    }
    
    protected void markFieldAsDirty(int mainIndex, int bitwiseIndex, boolean aFlag)
    {
       if (aFlag)
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] | bitwiseIndex;
       else
          dirtyFlagsArray[mainIndex] = dirtyFlagsArray[mainIndex] & ~bitwiseIndex;
    }

    protected boolean checkFieldDirtiness(int mainIndex, int bitwiseIndex)
    {
       return (dirtyFlagsArray[mainIndex] & bitwiseIndex) != 0;
    }

    public String getDtokey()
    {
        StringBuilder stb = new StringBuilder();
        stb.append(documentid);
        return stb.toString();
    }

    public String getDtodescr()
    {
        boolean notNull = false;
        StringBuilder stb = new StringBuilder();
        if (documenturl != null)
        {
        stb.append(documenturl);
        notNull = true;        
        }
        if (notNull)
            return stb.toString();
            
        return null;
    }

    /**
      * DataBean Getter And Setter Accessor
      */

    // documentid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isDocumentidDirty()  { return checkFieldDirtiness(DOCUMENTID_DIRTYGROUP, DOCUMENTID_DIRTYMASK); }

    public java.lang.String   getDocumentid()         { return documentid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "documentid")
    public java.lang.String   getDocumentidAsString() { return (documentid == null) ? "" : documentid; }

    // documentid setter methods.
    
    protected void markDocumentidAsDirty(boolean aFlag)  { markFieldAsDirty(DOCUMENTID_DIRTYGROUP, DOCUMENTID_DIRTYMASK, aFlag); }


    public void setDocumentid(String  p)
    {
       setDocumentid(p, DTOCasingStyle.none);
    }
    
    public void setDocumentid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markDocumentidAsDirty(!equalsObject(documentid, p));
       documentid = p;
    }

    // eventid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isEventidDirty()  { return checkFieldDirtiness(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK); }

    public java.lang.String   getEventid()         { return eventid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "eventid")
    public java.lang.String   getEventidAsString() { return (eventid == null) ? "" : eventid; }

    // eventid setter methods.
    
    protected void markEventidAsDirty(boolean aFlag)  { markFieldAsDirty(EVENTID_DIRTYGROUP, EVENTID_DIRTYMASK, aFlag); }


    public void setEventid(String  p)
    {
       setEventid(p, DTOCasingStyle.none);
    }
    
    public void setEventid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markEventidAsDirty(!equalsObject(eventid, p));
       eventid = p;
    }

    // applicationid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isApplicationidDirty()  { return checkFieldDirtiness(APPLICATIONID_DIRTYGROUP, APPLICATIONID_DIRTYMASK); }

    public java.lang.String   getApplicationid()         { return applicationid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "applicationid")
    public java.lang.String   getApplicationidAsString() { return (applicationid == null) ? "" : applicationid; }

    // applicationid setter methods.
    
    protected void markApplicationidAsDirty(boolean aFlag)  { markFieldAsDirty(APPLICATIONID_DIRTYGROUP, APPLICATIONID_DIRTYMASK, aFlag); }


    public void setApplicationid(String  p)
    {
       setApplicationid(p, DTOCasingStyle.none);
    }
    
    public void setApplicationid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markApplicationidAsDirty(!equalsObject(applicationid, p));
       applicationid = p;
    }

    // documenttypecode getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isDocumenttypecodeDirty()  { return checkFieldDirtiness(DOCUMENTTYPECODE_DIRTYGROUP, DOCUMENTTYPECODE_DIRTYMASK); }

    public java.lang.String   getDocumenttypecode()         { return documenttypecode; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "documenttypecode")
    public java.lang.String   getDocumenttypecodeAsString() { return (documenttypecode == null) ? "" : documenttypecode; }

    // documenttypecode setter methods.
    
    protected void markDocumenttypecodeAsDirty(boolean aFlag)  { markFieldAsDirty(DOCUMENTTYPECODE_DIRTYGROUP, DOCUMENTTYPECODE_DIRTYMASK, aFlag); }


    public void setDocumenttypecode(String  p)
    {
       setDocumenttypecode(p, DTOCasingStyle.none);
    }
    
    public void setDocumenttypecode(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markDocumenttypecodeAsDirty(!equalsObject(documenttypecode, p));
       documenttypecode = p;
    }

    // documentname getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isDocumentnameDirty()  { return checkFieldDirtiness(DOCUMENTNAME_DIRTYGROUP, DOCUMENTNAME_DIRTYMASK); }

    public java.lang.String   getDocumentname()         { return documentname; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "documentname")
    public java.lang.String   getDocumentnameAsString() { return (documentname == null) ? "" : documentname; }

    // documentname setter methods.
    
    protected void markDocumentnameAsDirty(boolean aFlag)  { markFieldAsDirty(DOCUMENTNAME_DIRTYGROUP, DOCUMENTNAME_DIRTYMASK, aFlag); }


    public void setDocumentname(String  p)
    {
       setDocumentname(p, DTOCasingStyle.none);
    }
    
    public void setDocumentname(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markDocumentnameAsDirty(!equalsObject(documentname, p));
       documentname = p;
    }

    // documenturl getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isDocumenturlDirty()  { return checkFieldDirtiness(DOCUMENTURL_DIRTYGROUP, DOCUMENTURL_DIRTYMASK); }

    public java.lang.String   getDocumenturl()         { return documenturl; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "documenturl")
    public java.lang.String   getDocumenturlAsString() { return (documenturl == null) ? "" : documenturl; }

    // documenturl setter methods.
    
    protected void markDocumenturlAsDirty(boolean aFlag)  { markFieldAsDirty(DOCUMENTURL_DIRTYGROUP, DOCUMENTURL_DIRTYMASK, aFlag); }


    public void setDocumenturl(String  p)
    {
       setDocumenturl(p, DTOCasingStyle.none);
    }
    
    public void setDocumenturl(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markDocumenturlAsDirty(!equalsObject(documenturl, p));
       documenturl = p;
    }

    // filesize getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isFilesizeDirty()  { return checkFieldDirtiness(FILESIZE_DIRTYGROUP, FILESIZE_DIRTYMASK); }

    public java.lang.Long   getFilesize() { return filesize; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "filesize")
    public String getFilesizeAsString() { return longAsString(filesize); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public long   getFilesizeAsLong()    { return filesize != null ? filesize.longValue() : 0L; }

    // filesize setter methods.
    
    protected void markFilesizeAsDirty(boolean aFlag)  { markFieldAsDirty(FILESIZE_DIRTYGROUP, FILESIZE_DIRTYMASK, aFlag); }


    public void setFilesize(java.lang.Long  p)
    {
    	markFilesizeAsDirty(!equalsObject(filesize, p));
    	filesize = p;
    }
    public void setFilesizeAsLong(long p)
    {
    	setFilesize(new java.lang.Long(p));
    }
    public void setFilesize()
    {
    	setFilesize(0L);
    }
    public void setFilesizeAsString(String  p)
    {
    	setFilesize(stringAsLong(p));
    }

    // contenttype getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isContenttypeDirty()  { return checkFieldDirtiness(CONTENTTYPE_DIRTYGROUP, CONTENTTYPE_DIRTYMASK); }

    public java.lang.String   getContenttype()         { return contenttype; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "contenttype")
    public java.lang.String   getContenttypeAsString() { return (contenttype == null) ? "" : contenttype; }

    // contenttype setter methods.
    
    protected void markContenttypeAsDirty(boolean aFlag)  { markFieldAsDirty(CONTENTTYPE_DIRTYGROUP, CONTENTTYPE_DIRTYMASK, aFlag); }


    public void setContenttype(String  p)
    {
       setContenttype(p, DTOCasingStyle.none);
    }
    
    public void setContenttype(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markContenttypeAsDirty(!equalsObject(contenttype, p));
       contenttype = p;
    }

    // annotation getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isAnnotationDirty()  { return checkFieldDirtiness(ANNOTATION_DIRTYGROUP, ANNOTATION_DIRTYMASK); }

    public java.lang.String   getAnnotation()         { return annotation; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "annotation")
    public java.lang.String   getAnnotationAsString() { return (annotation == null) ? "" : annotation; }

    // annotation setter methods.
    
    protected void markAnnotationAsDirty(boolean aFlag)  { markFieldAsDirty(ANNOTATION_DIRTYGROUP, ANNOTATION_DIRTYMASK, aFlag); }


    public void setAnnotation(String  p)
    {
       setAnnotation(p, DTOCasingStyle.none);
    }
    
    public void setAnnotation(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markAnnotationAsDirty(!equalsObject(annotation, p));
       annotation = p;
    }

    // imageurl getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isImageurlDirty()  { return checkFieldDirtiness(IMAGEURL_DIRTYGROUP, IMAGEURL_DIRTYMASK); }

    public java.lang.String   getImageurl()         { return imageurl; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "imageurl")
    public java.lang.String   getImageurlAsString() { return (imageurl == null) ? "" : imageurl; }

    // imageurl setter methods.
    
    protected void markImageurlAsDirty(boolean aFlag)  { markFieldAsDirty(IMAGEURL_DIRTYGROUP, IMAGEURL_DIRTYMASK, aFlag); }


    public void setImageurl(String  p)
    {
       setImageurl(p, DTOCasingStyle.none);
    }
    
    public void setImageurl(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markImageurlAsDirty(!equalsObject(imageurl, p));
       imageurl = p;
    }

    // imageheight getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isImageheightDirty()  { return checkFieldDirtiness(IMAGEHEIGHT_DIRTYGROUP, IMAGEHEIGHT_DIRTYMASK); }

    public java.lang.Integer   getImageheight() { return imageheight; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "imageheight")
    public String getImageheightAsString() { return integerAsString(imageheight); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getImageheightAsInt()    { return imageheight != null ? imageheight.intValue() : 0; }

    // imageheight setter methods.
    
    protected void markImageheightAsDirty(boolean aFlag)  { markFieldAsDirty(IMAGEHEIGHT_DIRTYGROUP, IMAGEHEIGHT_DIRTYMASK, aFlag); }


    public void setImageheight(java.lang.Integer  p)
    {
        markImageheightAsDirty(!equalsObject(imageheight, p));
    	imageheight = p;
    }
    public void setImageheightAsInt(int p)
    {
    	setImageheight(new java.lang.Integer(p));
    }
    public void setImageheight()
    {
    	setImageheight(0);
    }
    public void setImageheightAsString(String  p)
    {
    	setImageheight(stringAsInteger(p));
    }

    // imagewidth getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isImagewidthDirty()  { return checkFieldDirtiness(IMAGEWIDTH_DIRTYGROUP, IMAGEWIDTH_DIRTYMASK); }

    public java.lang.Integer   getImagewidth() { return imagewidth; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "imagewidth")
    public String getImagewidthAsString() { return integerAsString(imagewidth); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getImagewidthAsInt()    { return imagewidth != null ? imagewidth.intValue() : 0; }

    // imagewidth setter methods.
    
    protected void markImagewidthAsDirty(boolean aFlag)  { markFieldAsDirty(IMAGEWIDTH_DIRTYGROUP, IMAGEWIDTH_DIRTYMASK, aFlag); }


    public void setImagewidth(java.lang.Integer  p)
    {
        markImagewidthAsDirty(!equalsObject(imagewidth, p));
    	imagewidth = p;
    }
    public void setImagewidthAsInt(int p)
    {
    	setImagewidth(new java.lang.Integer(p));
    }
    public void setImagewidth()
    {
    	setImagewidth(0);
    }
    public void setImagewidthAsString(String  p)
    {
    	setImagewidth(stringAsInteger(p));
    }

    // iconurl getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isIconurlDirty()  { return checkFieldDirtiness(ICONURL_DIRTYGROUP, ICONURL_DIRTYMASK); }

    public java.lang.String   getIconurl()         { return iconurl; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "iconurl")
    public java.lang.String   getIconurlAsString() { return (iconurl == null) ? "" : iconurl; }

    // iconurl setter methods.
    
    protected void markIconurlAsDirty(boolean aFlag)  { markFieldAsDirty(ICONURL_DIRTYGROUP, ICONURL_DIRTYMASK, aFlag); }


    public void setIconurl(String  p)
    {
       setIconurl(p, DTOCasingStyle.none);
    }
    
    public void setIconurl(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markIconurlAsDirty(!equalsObject(iconurl, p));
       iconurl = p;
    }

    // iconwidth getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isIconwidthDirty()  { return checkFieldDirtiness(ICONWIDTH_DIRTYGROUP, ICONWIDTH_DIRTYMASK); }

    public java.lang.Integer   getIconwidth() { return iconwidth; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "iconwidth")
    public String getIconwidthAsString() { return integerAsString(iconwidth); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getIconwidthAsInt()    { return iconwidth != null ? iconwidth.intValue() : 0; }

    // iconwidth setter methods.
    
    protected void markIconwidthAsDirty(boolean aFlag)  { markFieldAsDirty(ICONWIDTH_DIRTYGROUP, ICONWIDTH_DIRTYMASK, aFlag); }


    public void setIconwidth(java.lang.Integer  p)
    {
        markIconwidthAsDirty(!equalsObject(iconwidth, p));
    	iconwidth = p;
    }
    public void setIconwidthAsInt(int p)
    {
    	setIconwidth(new java.lang.Integer(p));
    }
    public void setIconwidth()
    {
    	setIconwidth(0);
    }
    public void setIconwidthAsString(String  p)
    {
    	setIconwidth(stringAsInteger(p));
    }

    // iconheight getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isIconheightDirty()  { return checkFieldDirtiness(ICONHEIGHT_DIRTYGROUP, ICONHEIGHT_DIRTYMASK); }

    public java.lang.Integer   getIconheight() { return iconheight; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "iconheight")
    public String getIconheightAsString() { return integerAsString(iconheight); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public int    getIconheightAsInt()    { return iconheight != null ? iconheight.intValue() : 0; }

    // iconheight setter methods.
    
    protected void markIconheightAsDirty(boolean aFlag)  { markFieldAsDirty(ICONHEIGHT_DIRTYGROUP, ICONHEIGHT_DIRTYMASK, aFlag); }


    public void setIconheight(java.lang.Integer  p)
    {
        markIconheightAsDirty(!equalsObject(iconheight, p));
    	iconheight = p;
    }
    public void setIconheightAsInt(int p)
    {
    	setIconheight(new java.lang.Integer(p));
    }
    public void setIconheight()
    {
    	setIconheight(0);
    }
    public void setIconheightAsString(String  p)
    {
    	setIconheight(stringAsInteger(p));
    }

    // uploadtimestamp getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isUploadtimestampDirty()  { return checkFieldDirtiness(UPLOADTIMESTAMP_DIRTYGROUP, UPLOADTIMESTAMP_DIRTYMASK); }

    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(org.r3.db.utils.SQLTimestampJAXBAdapter.class)
    public java.sql.Timestamp   getUploadtimestamp() { return uploadtimestamp; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "uploadtimestamp")
    public String getUploadtimestampAsString() { return timestampAsString(uploadtimestamp, getTimestampFormat()); }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public String getUploadtimestampAsString(java.text.DateFormat aDateFormat) { return timestampAsString(uploadtimestamp, aDateFormat); }

    // uploadtimestamp setter methods.
    
    protected void markUploadtimestampAsDirty(boolean aFlag)  { markFieldAsDirty(UPLOADTIMESTAMP_DIRTYGROUP, UPLOADTIMESTAMP_DIRTYMASK, aFlag); }


    public void setUploadtimestamp(java.sql.Timestamp  p)
    {
        markUploadtimestampAsDirty(!equalsObject(uploadtimestamp, p));
    	uploadtimestamp = p;
    }
    public void setUploadtimestamp(String  p, java.text.DateFormat aDateFormat)
    {
    	setUploadtimestamp(stringAsTimestamp(p, aDateFormat));
    }

    // crewmemberid getter methods.
    
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    public boolean isCrewmemberidDirty()  { return checkFieldDirtiness(CREWMEMBERID_DIRTYGROUP, CREWMEMBERID_DIRTYMASK); }

    public java.lang.String   getCrewmemberid()         { return crewmemberid; }
    @com.fasterxml.jackson.annotation.JsonIgnore
    @javax.xml.bind.annotation.XmlTransient 
    @CSVAnnotation(attribute = "crewmemberid")
    public java.lang.String   getCrewmemberidAsString() { return (crewmemberid == null) ? "" : crewmemberid; }

    // crewmemberid setter methods.
    
    protected void markCrewmemberidAsDirty(boolean aFlag)  { markFieldAsDirty(CREWMEMBERID_DIRTYGROUP, CREWMEMBERID_DIRTYMASK, aFlag); }


    public void setCrewmemberid(String  p)
    {
       setCrewmemberid(p, DTOCasingStyle.none);
    }
    
    public void setCrewmemberid(String  p, DTOCasingStyle casingStyle)
    {
    	 if (p != null)
    	 {
    	  p = p.trim();
    	 	if (p.length() == 0)  p = null;    	 	
    	 	else switch(casingStyle) 
    	 	{
    	 	   case none: 
    	 	   break;
    	 	   case uppercase:
    	 	      p = p.toUpperCase();
    	 	   break;
    	 	   case lowercase:
    	 	      p = p.toLowerCase();
    	 	   break;
    	 	}

       }
       markCrewmemberidAsDirty(!equalsObject(crewmemberid, p));
       crewmemberid = p;
    }

}
